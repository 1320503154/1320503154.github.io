<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaSpring学习</title>
    <url>/post/8a81cf60.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一切都是为了实战"><a href="#一切都是为了实战" class="headerlink" title="一切都是为了实战"></a>一切都是为了实战</h1><p><img src="https://s2.loli.net/2024/03/25/xVqo9vkJBUAywDZ.png" alt="image-20240325132434599"></p>
<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><p>java执行原理:</p>
<p>将高级编程语言翻译成机器语言:</p>
<p><img src="https://s2.loli.net/2024/05/14/wsut6aA1EMzfSTI.png" alt="image-20240514204420979"></p>
<p><img src="https://s2.loli.net/2024/05/14/UWiTXeZKnsuLCVa.png" alt="image-20240514204910463"></p>
<p><img src="https://s2.loli.net/2024/05/14/pBjyOKLlno4Mvxf.png" alt="image-20240514204942356"></p>
<p>大概执行过程.</p>
<p><img src="https://s2.loli.net/2024/05/14/NirayEVDM71oHS8.png" alt="image-20240514205041388"></p>
<p>进程的块就是页，内存的块就是框。学长现在真给我点明白了</p>
<p>老板给进程画大饼，进程想的空间是：“耶！”（页），实则去内存一看是个诓（页框），两者记在小本本（页表），一项一项叫表项。</p>
<p>还是人多力量大啊</p>
<p>反正哪一行都不容易,明天速通机器学习.</p>
<h1 id="javaSpring"><a href="#javaSpring" class="headerlink" title="javaSpring"></a>javaSpring</h1><h2 id="POJO是啥"><a href="#POJO是啥" class="headerlink" title="POJO是啥?"></a>POJO是啥?</h2><p>POJO是“Plain Old Java Object”的缩写，意为“普通的旧Java对象”，也称为简单Java对象。它是指自包含、独立、轻量级的Java类，不继承或实现特定框架或接口，也没有任何特殊限制或要求。POJO类的设计目标是实现基本的Java对象模型，并且可以在任何Java环境中使用，而不依赖于特定的框架或平台。</p>
<p>POJO类通常具有以下特点：</p>
<ul>
<li>符合Java语言的基本语法和约定。</li>
<li>不需要继承特定的基类或实现特定的接口。</li>
<li>通常包含私有字段（成员变量）、公开的getter和setter方法（属性访问器）以及其他常规的Java方法。</li>
<li>可以被序列化为XML、JSON等格式，或者用于持久化到数据库中。</li>
<li>可以用于任何Java开发环境，不依赖于特定的框架、库或平台。</li>
</ul>
<p>POJO类的设计原则是简单、清晰、可重用和可测试性，没有复杂的继承关系或依赖关系，易于理解和维护。POJO类常用于构建业务逻辑、数据传输对象（DTO）、数据访问对象（DAO）等领域对象。它们通常用于解耦和分离关注点，使代码模块化和可测试，提高代码的可读性、可维护性和可扩展性。</p>
<p>总而言之，POJO是一种简单、轻量级、无依赖的Java类，遵循基本的Java语言约定，并且不依赖于特定的框架或平台。它们被广泛应用于各种Java开发项目中，以实现可读性好、可维护性高的代码。</p>
<h2 id="MVC-框架是啥"><a href="#MVC-框架是啥" class="headerlink" title="MVC 框架是啥?"></a>MVC 框架是啥?</h2><p>MVC（Model-View-Controller）是一种软件设计模式，用于将应用程序的逻辑、数据和用户界面分离。它将应用程序分为三个组件：模型（Model）、视图（View）和控制器（Controller），每个组件专注于不同的责任。</p>
<ul>
<li><p>模型（Model）：模型代表应用程序的数据和业务逻辑。它负责处理数据的读取、存储、验证和操作，以及实现应用程序的核心功能。模型不依赖于视图或控制器，它提供接口供其他组件访问和操作数据。</p>
</li>
<li><p>视图（View）：视图是模型的可视化表现。它负责用户界面的展示，呈现数据给用户，以及接收用户的输入。视图根据模型的状态进行更新，并将用户的操作传递给控制器进行处理。视图通常是被动的，即它只负责展示数据，不处理业务逻辑。</p>
</li>
<li><p>控制器（Controller）：控制器是模型和视图之间的中间人。它接收来自视图的用户输入，并根据输入更新模型的状态，或者根据模型的状态更新视图。控制器处理用户的请求，协调模型和视图之间的交互，并确保数据的一致性和正确性。</p>
</li>
</ul>
<p>MVC框架通过将应用程序的不同部分分别放置在模型、视图和控制器中，实现了应用程序的分层和解耦。这种分离使得应用程序的开发和维护更加容易，提供了更好的可测试性和可扩展性。通过MVC框架，开发人员可以更好地组织代码、提高代码的重用性，并且更好地应对需求变化。</p>
<p>总而言之，MVC框架是一种软件设计模式，用于将应用程序的逻辑、数据和用户界面分离，以实现代码的模块化、可维护性和可扩展性。它通过模型、视图和控制器的角色划分，提供了一种结构化的开发方式，使得应用程序更易于开发、测试和维护。</p>
<p><strong>举个例子,后端是不是负责模型和控制器?<br>前端负责视图view?</strong></p>
<p>是的，通常情况下，后端负责模型和控制器，前端负责视图。</p>
<p>举个例子，假设我们正在开发一个简单的博客应用程序：</p>
<ul>
<li><p>后端负责模型和控制器：后端开发人员会负责博客应用程序的数据存储和业务逻辑。他们会设计和实现博客文章的数据模型（例如文章的标题、内容、作者等），并处理与数据相关的操作，比如创建、读取、更新和删除文章。控制器层会接受来自前端的请求，处理用户的输入和操作，并调用适当的模型方法来执行业务逻辑。</p>
</li>
<li><p>前端负责视图：前端开发人员会负责博客应用程序的用户界面设计和用户交互。他们会设计和实现博客页面的布局、样式和交互效果，以提供用户友好的界面。前端会根据用户的操作和需求，向后端发送请求，获取博客数据，并将数据呈现给用户。</p>
</li>
</ul>
<p>在这个例子中，后端负责设计和维护博客数据的模型，以及处理博客相关的业务逻辑。同时，控制器负责接收来自前端的请求，执行相应的操作，并将结果返回给前端。前端负责设计、开发和维护博客应用程序的用户界面，负责呈现数据给用户，并将用户的操作发送给后端。</p>
<p>通过MVC的结构，前端和后端之间的工作可以相对独立，并通过定义好的接口进行通信。这种分工和协作方式可以提高开发效率、代码的可维护性，并且便于对前后端进行扩展和适应变化。</p>
<p><strong>model是不是就是service这种开发接口?</strong></p>
<p>不完全正确。在MVC架构中，模型（Model）通常是指应用程序的数据模型和业务逻辑的组合，它不仅仅是一个”Service”接口。</p>
<p>模型（Model）包含了处理数据存取、验证、处理和业务逻辑的组件，而这些组件可以包括服务（Service）类、实体类（Entity）或数据访问对象（DAO）、业务逻辑组件（Business Logic Component）等。</p>
<ul>
<li><p>服务（Service）类：服务类通常是模型的一部分，用于提供业务逻辑的实现。它们封装了对数据的处理和操作，并且可能调用其他模型组件（如数据访问对象）来完成一些具体的任务。</p>
</li>
<li><p>实体类（Entity）：实体类是模型中的数据对象，代表了应用程序中的核心数据结构。它可以是数据库中的表，也可以是应用程序中的某个业务实体。实体类通常包含属性（字段）和相关的方法，用于操作和访问这些属性。</p>
</li>
<li><p>数据访问对象（DAO）：DAO是用于访问数据存储（如数据库）的组件。它封装了对数据库的操作，提供数据的读取、存储、更新等方法。DAO通常负责处理数据库连接、执行SQL语句，并将查询结果转换为模型中的实体对象。</p>
</li>
</ul>
<p>除了服务、实体和DAO之外，模型还可以包括其他的组件，如业务逻辑组件、数据传输对象（DTO）、工具类等。这些组件共同组成了模型层，用于处理应用程序的数据和业务逻辑。</p>
<p>总结来说，模型包括了在MVC架构中处理数据和业务逻辑的组件。其中服务类（Service）是其中一种常见的模块，但模型不仅限于服务类。模型可以包括实体类（Entity）、数据访问对象（DAO）、业务逻辑组件等，以及其他与数据和业务逻辑有关的组件。</p>
<h2 id="Bean是啥"><a href="#Bean是啥" class="headerlink" title="Bean是啥?"></a>Bean是啥?</h2><p>在Spring框架中，Bean是指由Spring容器实例化、管理和组装的对象。它是Spring中最基本的组件，可以理解为在应用程序中被Spring容器管理的对象实例。</p>
<p>Spring的IoC（控制反转）容器负责实例化、配置和管理这些Bean对象。通过IoC容器，开发人员可以将对象的创建、依赖注入和生命周期管理交给Spring框架来处理，从而减轻了开发人员的负担，提高了应用程序的灵活性和可维护性。</p>
<p>在Spring中，Bean具有以下特点：</p>
<ol>
<li><p>实例化：Spring容器根据配置信息或注解来实例化Bean对象。可以使用传统的XML配置方式，也可以使用基于注解的方式。</p>
</li>
<li><p>配置：Spring容器通过依赖注入（Dependency Injection）来配置Bean的依赖关系和属性。开发人员可以在配置文件或注解中定义Bean的属性值，以及其他Bean之间的依赖关系。</p>
</li>
<li><p>生命周期管理：Spring容器负责管理Bean的生命周期，包括创建、初始化和销毁。开发人员可以通过实现特定的接口或使用注解来控制Bean的初始化和销毁过程。</p>
</li>
<li><p>单例或多例：Spring的Bean可以配置为单例（Singleton）模式或多例（Prototype）模式。单例模式表示容器中只有一个Bean实例，多例模式表示每次获取Bean时都会创建一个新的实例。</p>
</li>
<li><p>AOP增强：Spring容器可以通过AOP（面向切面编程）为Bean提供额外的功能，比如事务管理、日志记录等。通过AOP，开发人员可以将与核心业务逻辑无关的横切关注点统一管理。</p>
</li>
</ol>
<p>Spring的Bean概念是Spring框架的核心之一。它使得开发人员可以通过IoC容器管理对象的生命周期和依赖关系，从而提供了灵活、可扩展的开发方式。通过使用Spring的Bean，开发人员可以实现解耦、提高系统的可测试性和可维护性。</p>
<h2 id="苍穹外卖项目"><a href="#苍穹外卖项目" class="headerlink" title="苍穹外卖项目"></a>苍穹外卖项目</h2><h3 id="软件开发整体介绍"><a href="#软件开发整体介绍" class="headerlink" title="软件开发整体介绍"></a>软件开发整体介绍</h3><h4 id="软件开发流程"><a href="#软件开发流程" class="headerlink" title="软件开发流程"></a>软件开发流程</h4><p>需求规格说明书:</p>
<p><img src="https://s2.loli.net/2024/03/25/Z83YplPi49kEtoa.png" alt="image-20240325123447048"></p>
<p>产品原型:通过静态网页的形式展示:</p>
<p><img src="https://s2.loli.net/2024/03/25/qtAGWZS5r8efRUD.png" alt="image-20240325123515349"></p>
<p>UI设计:</p>
<p><img src="https://s2.loli.net/2024/03/25/4Npxjb8J31Uif9k.png" alt="image-20240325124057523"></p>
<p>数据库设计:</p>
<p><img src="https://s2.loli.net/2024/03/25/ZTBRiJ4FstA2UQp.png" alt="image-20240325124145350"></p>
<p>接口设计:</p>
<p><img src="https://s2.loli.net/2024/03/25/azNJDU59MTGFQZ6.png" alt="image-20240325124200495"></p>
<p>上述进行完就是这些了:</p>
<p><img src="https://s2.loli.net/2024/03/25/7mfyPWVTeNx2Apl.png" alt="image-20240325124316779"></p>
<p><img src="https://s2.loli.net/2024/03/25/y7IkXaJh2PWSNrQ.png" alt="image-20240325124415144"></p>
<h4 id="角色分工"><a href="#角色分工" class="headerlink" title="角色分工"></a>角色分工</h4><p><img src="https://s2.loli.net/2024/03/25/wVR1yquHQKk834e.png" alt="image-20240325124501062"></p>
<h4 id="环境分配"><a href="#环境分配" class="headerlink" title="环境分配"></a>环境分配</h4><p><img src="https://s2.loli.net/2024/03/25/7zFAyHnwqWhsMuJ.png" alt="image-20240325125052319"></p>
<p>开发-&gt;测试-&gt;生产.</p>
<h3 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h3><h4 id="功能架构"><a href="#功能架构" class="headerlink" title="功能架构:"></a>功能架构:</h4><p><img src="https://s2.loli.net/2024/03/25/qWixoKEhHk4DUsz.png" alt="image-20240325125342661"></p>
<h4 id="产品原型"><a href="#产品原型" class="headerlink" title="产品原型:"></a>产品原型:</h4><p><img src="https://s2.loli.net/2024/03/25/5aUt8RxMjw6XFhL.png" alt="image-20240325125659157"></p>
<p><img src="https://s2.loli.net/2024/03/25/waiboq1eX9cJ2fC.png" alt="image-20240325125727296"></p>
<p>展示效果的模型就是产品原型.</p>
<p><img src="https://s2.loli.net/2024/03/25/kuVn2BWv3JhHXMr.png" alt="image-20240325130043869"></p>
<p>先学着,耐住寂寞才能变强,不然图书馆为什么那么多人.</p>
<p>通过产品原型就能理解业务如何实现:</p>
<p><img src="https://s2.loli.net/2024/03/25/ZFnOrR3Gv9gwodU.png" alt="image-20240325130329943"></p>
<p><img src="https://s2.loli.net/2024/03/25/vsHV4uJq2elf1o7.png" alt="image-20240325130347033"></p>
<p>nb的产品原型右边都是有这些说明文字的.</p>
<p>技术选型:</p>
<p>WebSocket:实现项目中的催单和来单提醒.</p>
<p><img src="https://s2.loli.net/2024/03/25/kQq1piJNt8szrDm.png" alt="image-20240325133242923"></p>
<h3 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h3><p>经典前后端分离:</p>
<p><img src="https://s2.loli.net/2024/03/25/VhvXQLApHTxBZer.png" alt="image-20240325134043649"></p>
<p>专业术语:</p>
<p>data transfer object和value object.</p>
<p><img src="https://s2.loli.net/2024/03/25/xU7r9H4gkMO32hC.png" alt="image-20240325195449249"></p>
<p>在软件开发中，<strong>POJO</strong> 是 “Plain Old Java Object” 的缩写，指的是简单的普通Java对象，它不继承特定类或实现特定接口，也不依赖特定框架。POJO 是对 JavaBean 的一种扩展概念，用来表示普通的Java对象，它通常用于承载数据、传输数据或封装业务逻辑。</p>
<p><strong>示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructors, getters, setters</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	最喜欢controller的一集</p>
<p><img src="https://s2.loli.net/2024/03/25/8f6p9WdcGSz1LE4.png" alt="image-20240325204735328"></p>
<h3 id="Java基础-1"><a href="#Java基础-1" class="headerlink" title="Java基础"></a>Java基础</h3><h4 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式:"></a>单例设计模式:</h4><p><img src="https://s2.loli.net/2024/03/25/Vb182s3UmBtOjri.png" alt="image-20240325205749805"></p>
<p>代码示例:</p>
<p><img src="https://s2.loli.net/2024/03/25/kmyAspPWNhJF3Yx.png" alt="image-20240325210603909"></p>
<p>类变量是属于类自己持有的:</p>
<p>定义方法就是:private static A a &#x3D; new A();类变量a只会有一个.</p>
<p>打印地址,获取到的是同一个对象:<img src="https://s2.loli.net/2024/03/25/fPYO4yg1d6RzB5a.png" alt="image-20240325210755523"></p>
<p>单例设计模式的好处:</p>
<p>​	例子:runTime类(<code>代表你程序的运行环境</code>):</p>
<p><img src="https://s2.loli.net/2024/03/25/y3JLC8uF2DbhkpH.png" alt="image-20240325210934092"></p>
<p>​	final修饰变量必须赋初始值，并且不能被修改</p>
<p><img src="https://s2.loli.net/2024/03/25/BZAJfxnEwXli4M8.png" alt="image-20240325211110910"></p>
<p><img src="https://s2.loli.net/2024/03/25/17rCRH3VIhc95qQ.png" alt="image-20240325211149011"></p>
<p>扩展:<code>懒汉式的单例对象</code></p>
<p><img src="https://s2.loli.net/2024/03/25/62RwFut4OQdh1zq.png" alt="image-20240325211248547"></p>
<h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p><img src="https://s2.loli.net/2024/03/25/xyXBZu7K1mhopSF.png" alt="image-20240325211544308"></p>
<p>匿名的意思就是不用给这个类起名字.可以直接把这个类传入当参数.</p>
<p><img src="https://s2.loli.net/2024/03/25/k1S56oL9dxw8zg2.png" alt="image-20240325211739239"></p>
<p>使用java开发桌面程序的时候:<img src="https://s2.loli.net/2024/03/25/VGBkcxt1P7eZIvy.png" alt="image-20240325212124780"></p>
<p><strong>这里监听事件就需要匿名内部类了.一般都是为了满足别人定义好的API的要求.</strong></p>
<p><code>最终的核心目的是简化代码. </code></p>
<p>和js的箭头函数差不多:<img src="https://s2.loli.net/2024/03/25/Lh7r6cPMFnwqjWQ.png" alt="image-20240325212722802"></p>
<p>相信我:看视频就是最快的,倍速!</p>
<h4 id="反射"><a href="#反射" class="headerlink" title="反射:"></a>反射:</h4><p>反射是:加载类,然后允许以编程的方式解刨类中的各种成分(成员变量,方法,构造器等等).</p>
<p>比如IDEA会自动提示对象的方法和属性,这就是反射的应用:</p>
<p><img src="https://s2.loli.net/2024/03/25/kzQGn1qwoysEFil.png" alt="image-20240325213301130"></p>
<p><img src="https://s2.loli.net/2024/03/25/WY5hprnbyi9PDmf.png" alt="image-20240325213402175"></p>
<p>代码示例:</p>
<p><img src="C:/Users/13205/AppData/Roaming/Typora/typora-user-images/image-20240325213623682.png" alt="image-20240325213623682"></p>
<p>反射的作用:</p>
<p><img src="https://s2.loli.net/2024/03/26/ZoagFd4EimuU5JK.png" alt="image-20240326095458759"></p>
<p><strong>框架就是一大堆Java代码</strong>:</p>
<p><img src="https://s2.loli.net/2024/03/26/YhDmlO8XfkatS96.png" alt="image-20240326095649352"></p>
<p>具体实现:”</p>
<p><img src="https://s2.loli.net/2024/03/26/aHI5bKdhTE6XvjG.png" alt="image-20240326100030579"></p>
<h4 id="注解"><a href="#注解" class="headerlink" title="注解:"></a>注解:</h4><p>注解的本质就是接口,里面没有属性,只有抽象方法.</p>
<p>注解可以实现标注,也就是提供信息罢了.</p>
<p>主要目的还是<code>实现框架,告诉编译器:IDEA和框架代码,这个函数是干啥的,然后框架识别到这些,直接采取对应的措施,都是人家定义好的,直接用就行了.</code></p>
<p>使用注解实现带有注解:<strong>MyTest的方法才能启动</strong></p>
<p><img src="https://s2.loli.net/2024/03/26/F1bvxlOHWsAQatD.png" alt="image-20240326201052643"></p>
<h4 id="DTO-VO-Entity"><a href="#DTO-VO-Entity" class="headerlink" title="DTO,VO,Entity:"></a>DTO,VO,Entity:</h4><p>在Java中，DTO（Data Transfer Object）、VO（Value Object）和Entity（实体类）是常见的概念，用于在不同层之间传递数据或表示某个领域的实体对象。下面是一个简单的示例来说明它们之间的区别和用法：</p>
<h5 id="Entity（实体类）："><a href="#Entity（实体类）：" class="headerlink" title="Entity（实体类）："></a>Entity（实体类）：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;products&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，<code>Product</code> 是一个实体类，用于表示数据库中产品表的结构。通常，实体类与数据库表字段直接映射。</p>
<h5 id="DTO（Data-Transfer-Object）："><a href="#DTO（Data-Transfer-Object）：" class="headerlink" title="DTO（Data Transfer Object）："></a>DTO（Data Transfer Object）：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DTO通常用于在不同层之间传递数据，在前后端交互或服务之间数据传输中发挥作用。在这个示例中，<code>ProductDTO</code> 是一个用于表示产品数据的传输对象，通常用于在服务层和控制器层之间传递数据。</p>
<h5 id="VO（Value-Object）："><a href="#VO（Value-Object）：" class="headerlink" title="VO（Value Object）："></a>VO（Value Object）：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>VO一般用于表示视图层的对象，将后端数据展示给前端。在这个示例中，<code>ProductVO</code> 是一个用于表示产品信息展示的值对象，通常在前端页面展示产品信息时使用。</p>
<p>总结：</p>
<ul>
<li>Entity 表示数据库中的实体，与数据库表字段直接映射。</li>
<li>DTO 负责不同层之间的数据传输，可以包含部分或全部实体类的信息。</li>
<li>VO 主要用于表示视图层需要的数据对象，包含展示所需的数据。</li>
</ul>
<h3 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a>后端开发</h3><p>修改数据库的地址和用户名和密码:</p>
<p>在application_dev.xml中修改即可.</p>
<p>全局异常处理类:</p>
<p><img src="https://s2.loli.net/2024/03/25/Pcq8gtjVweIDEu5.png" alt="image-20240325222110444"></p>
<p>通过代码跟踪的方式,确实能认识到许多java的程序执行和全局常量类和全局工具类的使用.</p>
<p>Result类:</p>
<p><img src="https://s2.loli.net/2024/03/25/NzTSWwkUhiR5Gbc.png" alt="image-20240325223400281"></p>
<p>IDEA调试还是太方便了,傻逼VSCODE</p>
<p><img src="https://s2.loli.net/2024/03/25/mvtzknSygpe9N8W.png" alt="image-20240325223429273"></p>
<p>这些常用的属性统一封装成spingBoot中的配置属性类:</p>
<p><img src="https://s2.loli.net/2024/03/25/H9lXyLd8GRheEPu.png" alt="image-20240325223554982"></p>
<p>具体就是加了一个注解:<img src="https://s2.loli.net/2024/03/25/eaznqf6WBLxCuXR.png" alt="image-20240325223620356"></p>
<p>加入这个<code>@ConfigurationProperties(prefix = &quot;sky.jwt&quot;)</code></p>
<p>就可以从sky.jwt这个文件导入属性了.</p>
<p>可以通过<strong>断点调试</strong>跟踪<strong>后端程序的执行过程</strong>.</p>
<p>可以直接查看内存中变量的值,jetbrain家的调试还是太方便了.</p>
<h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p><img src="https://s2.loli.net/2024/03/26/ws5eMUt2cK98ZRv.png" alt="image-20240326204901070"></p>
<p>答案:NGinx反向代理.</p>
<p><img src="https://s2.loli.net/2024/03/26/4Uj5QJatNryLYTm.png" alt="image-20240326210702868"></p>
<p>1.能够在集群方式运行的后端中,对服务器的状态进行监控,然后决定把请求转发给谁.</p>
<p>2.保证服务安全:一般来说后端的服务都是部署在公司内网的,内网不能由前端直接访问,而是通过nginx来配置让前端访问nginx这个服务器,相当于nginx中间层进行管理.</p>
<p>nginx教学:<img src="https://s2.loli.net/2024/03/26/vzNE5rcZBI9gyom.png" alt="image-20240326211147020"></p>
<p>会<strong>自动对替换的静态路径后面添加上动态路径</strong>,上面红色的<code>/api/</code>就是被替换的,看图就行</p>
<p>反正都是转发请求(负载均衡和反向代理).</p>
<p><img src="https://s2.loli.net/2024/03/26/zIFeX8KVnkOYwlj.png" alt="image-20240326212235582"></p>
<p>upstream代表命名一个服务器组.</p>
<p><img src="https://s2.loli.net/2024/03/26/4ydJEYM1z7m9SZN.png" alt="image-20240326213005946"></p>
<p>类似于这个:</p>
<p><img src="https://s2.loli.net/2024/03/26/Mqo2cIJLle5SWws.png" alt="image-20240326213932204"></p>
<h4 id="Nginx配置-简单"><a href="#Nginx配置-简单" class="headerlink" title="Nginx配置(简单)"></a>Nginx配置(简单)</h4><p>答案:就是按照人家这个配置就行,照抄,别想太多:</p>
<p><img src="https://s2.loli.net/2024/04/07/6LqBSgp4iAz8bIP.png" alt="image-20240407205857620"></p>
<p>前后的斜杠都要加…</p>
<p>最终代码:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span> mime.types; <span class="comment"># 包含mime.types文件，用于定义文件类型</span></span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream; <span class="comment"># 默认文件类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;  # 定义日志格式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;  # 访问日志路径和格式</span></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>; <span class="comment"># 开启文件发送</span></span><br><span class="line">    <span class="comment">#tcp_nopush     on;  # 开启TCP_NOPUSH</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;  # 保持连接超时时间为0</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">65</span>; <span class="comment"># 保持连接超时时间为65秒</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;  # 开启gzip压缩</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">map</span> <span class="variable">$http_upgrade</span> <span class="variable">$connection_upgrade</span> &#123;</span><br><span class="line">        <span class="attribute">default</span> upgrade; <span class="comment"># 默认值为upgrade</span></span><br><span class="line">        &#x27;&#x27; close; <span class="comment"># 如果$http_upgrade为空，则值为close</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">upstream</span> webservers &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span> weight=<span class="number">90</span> ; <span class="comment"># 定义服务器地址和权重</span></span><br><span class="line">        <span class="comment">#server 127.0.0.1:8088 weight=10 ;  # 定义服务器地址和权重</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>; <span class="comment"># 监听端口80</span></span><br><span class="line">        <span class="attribute">server_name</span> localhost; <span class="comment"># 服务器名称为localhost</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;  # 字符编码为koi8-r</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;  # 访问日志路径和格式</span></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span> html/sky; <span class="comment"># 根目录为html/sky</span></span><br><span class="line">            <span class="attribute">index</span> index.html index.htm; <span class="comment"># 默认首页文件</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;  # 错误页面重定向</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html; <span class="comment"># 错误页面重定向</span></span><br><span class="line">        <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span> html; <span class="comment"># 根目录为html</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向代理,处理管理端发送的请求</span></span><br><span class="line">        <span class="section">location</span> /api/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://localhost:8080/admin/;</span><br><span class="line">            <span class="comment">#proxy_pass   http://webservers/admin/;</span></span><br><span class="line">            <span class="comment"># 反向代理到http://webservers/admin/</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向代理,处理用户端发送的请求</span></span><br><span class="line">        <span class="section">location</span> /user/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://webservers/user/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># WebSocket</span></span><br><span class="line">        <span class="section">location</span> /ws/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://webservers/ws/;</span><br><span class="line">            <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>; <span class="comment"># 使用HTTP/1.1协议</span></span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">3600s</span>; <span class="comment"># 代理读取超时时间为3600秒</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>; <span class="comment"># 设置Upgrade请求头</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;<span class="variable">$connection_upgrade</span>&quot;</span>; <span class="comment"># 设置Connection请求头</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前后的斜杠不能忘啊</p>
<p><code>location /api/</code></p>
<p><code>proxy_pass http://localhost:8080/admin/;</code></p>
<p>不能写成这个:</p>
<p><code>location /api</code></p>
<p><code>proxy_pass http://localhost:8080/admin</code></p>
<p>上面这个是错的,具体原因:</p>
<p><img src="https://s2.loli.net/2024/04/07/NqoHjXTfDYUAEe3.png" alt="image-20240407210048160"></p>
<h4 id="完善登录功能"><a href="#完善登录功能" class="headerlink" title="完善登录功能"></a>完善登录功能</h4><p>hash密码存储到数据库.(MD5加密)</p>
<p><img src="https://s2.loli.net/2024/03/26/NQKUcsq2RbwY1xX.png" alt="image-20240326220037226"></p>
<h4 id="导入接口文档"><a href="#导入接口文档" class="headerlink" title="导入接口文档:"></a>导入接口文档:</h4><p>前后端分离的开发流程:</p>
<p><img src="https://s2.loli.net/2024/03/26/Exkn3Do62YGyWJA.png" alt="image-20240326222212529"></p>
<p>直接使用APIFOX导入Yapi的json格式的接口即可.</p>
<h4 id="使用Swagger"><a href="#使用Swagger" class="headerlink" title="使用Swagger:"></a>使用Swagger:</h4><p>自动生成接口文档和进行接口测试.</p>
<p><img src="https://s2.loli.net/2024/03/26/NHfMwiKO3Wjmez6.png" alt="image-20240326223212193"></p>
<p><strong>最重要的代码</strong></p>
<p><img src="https://s2.loli.net/2024/03/26/jM2HBFbpNUgKCI5.png" alt="image-20240326223414397"></p>
<p>设置静态资源映射:</p>
<p><img src="https://s2.loli.net/2024/03/26/keAolqyGNZJ4tni.png" alt="image-20240326223314547"></p>
<p>不设置静态资源映射就找不到网页.</p>
<p>yapi:<code>apifox</code>是接口设计阶段使用的</p>
<p>swagger是后端接口测试使用的,两者并不冲突.</p>
<p><img src="https://s2.loli.net/2024/03/27/PzacVD8kujBHnwS.png" alt="image-20240327122208454"></p>
<h3 id="员工管理-商家管理"><a href="#员工管理-商家管理" class="headerlink" title="员工管理,商家管理"></a>员工管理,商家管理</h3><p>先开发:分类管理.</p>
<p>英语还是没有那么热衷,语言就是多听,多说,多看就行了.</p>
<p>代码也是语言!!.</p>
<h4 id="1-员工端"><a href="#1-员工端" class="headerlink" title="1.员工端"></a>1.员工端<img src="https://s2.loli.net/2024/03/27/6yNM8SseVFfc2nh.png" alt="image-20240327131809202"></h4><p>单表的增删改查.</p>
<p><img src="https://s2.loli.net/2024/03/27/lGQLhdUjIvexXWA.png" alt="image-20240327131904462"></p>
<p>基本都是上面的流程.</p>
<p>通过对产品原型的分析,确定代码如何写:</p>
<p><img src="https://s2.loli.net/2024/03/27/IVnrmSpHXlxW3sk.png" alt="image-20240327132558039"></p>
<p><img src="https://s2.loli.net/2024/03/27/F71isHpNJbw5jTU.png" alt="image-20240327132323866"></p>
<p>使用前缀来对用户端和管理端的请求进行分离.</p>
<p><img src="https://s2.loli.net/2024/03/27/3iZ6vLnGBTNtcmq.png" alt="image-20240327132636273"></p>
<p><strong>终于到代码了!</strong></p>
<h5 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h5><p><img src="https://s2.loli.net/2024/03/27/ivgBHx8PJ3YMq5o.png" alt="image-20240327135823086"></p>
<p>还得是ai,提供的效率真的nb</p>
<p>1.controller先调用服务的方法:</p>
<p><img src="https://s2.loli.net/2024/03/27/cy3bWXfA4T2eJEd.png" alt="image-20240327145310042"></p>
<p>然后在service中写实际的保存逻辑.</p>
<p><img src="https://s2.loli.net/2024/03/27/yurKFovaweIpkgT.png" alt="image-20240327145352288"></p>
<p>最后在mapper中实现具体的逻辑:</p>
<p><img src="https://s2.loli.net/2024/03/27/knMVSPp1cJe2sb5.png" alt="image-20240327145521213"></p>
<p>Java中的token校验:</p>
<p><img src="https://s2.loli.net/2024/03/27/v5UxoRV6srG7mX2.png" alt="image-20240327200153409"></p>
<p>按照这里的配置项进行的令牌获取:</p>
<p><img src="https://s2.loli.net/2024/03/27/ZPe6AkgEuycxfrR.png" alt="image-20240327201137461"></p>
<p>所以请求头:里面也要附带上这个参数:</p>
<p><img src="https://s2.loli.net/2024/03/27/mc3YdB1lReGnv7N.png" alt="image-20240327201216969"></p>
<p>代码存在的问题:</p>
<p><img src="https://s2.loli.net/2024/03/27/KH1m3sqyubDeAIE.png" alt="image-20240327203033092"></p>
<p>就是ID和数据库在用户名重名的时候抛出了异常.这都是我自己要学习的,但是首先保证学校课程的学习吧.</p>
<p>首先保证学分绩.</p>
<p>异常处理:</p>
<p>通过spilt函数,将空格放进去,然后根据空格把字符串搞成字符串数组.</p>
<p>此时的用户名就是第三个,下标去取就是split[2],然后直接拼接字符串即可.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ar = <span class="string">&quot;i love you&quot;</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">ar.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">(<span class="number">3</span>) [<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;love&#x27;</span>, <span class="string">&#x27;you&#x27;</span>]<span class="comment">//java和js其实差不多.</span></span><br></pre></td></tr></table></figure>

<p>在全局的异常处理类中,直接重载异常处理器:</p>
<p><img src="https://s2.loli.net/2024/03/27/SqBfO8Zb6mCHLcw.png" alt="image-20240327211309247"></p>
<p>以后写笔记,只看代码开发视频.</p>
<p>动态获取当前登录员工的id:</p>
<p><img src="https://s2.loli.net/2024/03/27/8J4tkqY1Ul2rWwf.png" alt="image-20240327211506131"></p>
<p><img src="https://s2.loli.net/2024/03/27/lcWEOki2M9sCGHz.png" alt="image-20240327212035245"></p>
<p>因为创建的时候使用的:</p>
<p><img src="https://s2.loli.net/2024/03/27/7cCvOymgjaQLGxZ.png" alt="image-20240327212050930"></p>
<p>这里这个常量的值为:<img src="https://s2.loli.net/2024/03/27/tHehOwYSmJDlMTc.png" alt="image-20240327212113491"></p>
<p>其实这个map就是<code>&#123;empId:实际用户的id&#125;</code></p>
<p>然后到时候直接解码出来这个claims键值对即可.</p>
<p><img src="https://s2.loli.net/2024/03/27/PZ8c9yhAKLwkEWj.png" alt="image-20240327212414455"></p>
<p>引出<code>threadLocal</code></p>
<p>在java的Spring框架中,客户端发起的每一次请求,都对应单独一个线程.</p>
<p>这里是分别在jwt拦截器,service,contraller分别进行了id的打印.</p>
<p><img src="https://s2.loli.net/2024/03/27/JrH3agXlUQ1Nh2p.png" alt="image-20240327212902630"></p>
<p>使用ThreadLocal即可共享同一份线程的数据.</p>
<p>使用封装好的工具类:</p>
<p><img src="https://s2.loli.net/2024/03/27/7URAvCTtzxjoIqc.png" alt="image-20240327213243347"></p>
<h5 id="员工分页查询"><a href="#员工分页查询" class="headerlink" title="员工分页查询"></a>员工分页查询</h5><p><img src="https://s2.loli.net/2024/03/28/cLpeG1vMFTUwth3.png" alt="image-20240328192128553"></p>
<p>总共85个项目:</p>
<p>Query参数,通过浏览器的地址栏:<code>?方式</code>传递数据.</p>
<p>接口设计:<img src="https://s2.loli.net/2024/03/28/TVUAuo3PfGXQLDc.png" alt="image-20240328192112205"></p>
<p>代码:</p>
<p>根据请求参数设计DTO(数据传输对象,传递前端发过来的数据.) </p>
<p><img src="https://s2.loli.net/2024/03/28/XLy3IPeHEpo4hbv.png" alt="image-20240328192338435"></p>
<p><img src="https://s2.loli.net/2024/03/28/MC31pOdtqbYeVyD.png" alt="image-20240328192550093"></p>
<p>如果是query类型的参数,直接通过:</p>
<p><img src="https://s2.loli.net/2024/03/28/TZK5cLyHzFQxnBA.png" alt="image-20240328192808807"></p>
<p>声明就可以得到query了.不用<code>@RequestBody</code></p>
<p>插件自动化进行sql语句的拼接:<img src="https://s2.loli.net/2024/03/28/E7HYnMl9bzOrokK.png" alt="image-20240328194853244"></p>
<p>相当于动态参数Limit:getPage和getPageSize.</p>
<p><img src="https://s2.loli.net/2024/03/28/c2RGNtOkzTv54fM.png" alt="image-20240328195046539"></p>
<p>最终完成版本:</p>
<p><img src="https://s2.loli.net/2024/03/28/AmzgQY169kopWnX.png" alt="image-20240328203253769"></p>
<p>其实还是插件的作用,这里的mapper是这样写的,还得学习mybatis.</p>
<p><img src="https://s2.loli.net/2024/03/28/HzTYqSMaVy4l7Lg.png" alt="image-20240328203343544"></p>
<p>这段代码是一个 MyBatis 的 SQL 查询语句，用于在数据库表 <code>sky_take_out.employee</code> 中根据条件查询员工信息，并按照创建时间倒序排列。</p>
<ul>
<li><code>&lt;select&gt;</code> 标签定义了一个查询语句，该语句对应的结果类型为 <code>com.sky.entity.Employee</code>。</li>
<li><code>select * from sky_take_out.employee</code>：这部分是 SQL 查询语句的主体，用于选择所有员工信息。</li>
<li><code>&lt;where&gt;</code> 标签标识了条件语句的开始。</li>
<li><code>&lt;if&gt;</code> 标签用于根据条件判断是否添加特定的查询条件。在这里，如果传入的 <code>name</code> 参数不为 <code>null</code> 且不为空字符串，则添加一个按照名字模糊查询的条件。<ul>
<li><code>and name like concat(&#39;%&#39;,#&#123;name&#125;,&#39;%&#39;)</code>：这部分是条件语句，表示如果 <code>name</code> 参数不为空，则添加一个条件，通过 <code>like</code> 进行模糊匹配查询，查询名字中包含传入参数 <code>name</code> 的员工信息。</li>
</ul>
</li>
<li><code>&lt;/where&gt;</code> 标签标识了条件语句的结束。</li>
<li><code>order by create_time desc</code>：这部分表示根据 <code>create_time</code> 字段进行倒序排列，即最新创建的记录排在前面。</li>
</ul>
<p>看下插件的源码:</p>
<p><img src="https://s2.loli.net/2024/03/28/X95gsjrRIKq7Vkn.png" alt="image-20240328203612435"></p>
<p>这里设置这个pageHelper主要是查询分页,总体的数据量和分页查询几条数据</p>
<p><img src="https://s2.loli.net/2024/03/28/lNVaXW1ibqdvsG3.png" alt="image-20240328203716675"></p>
<p>然后在这个ThreadLocal中存入了配置的设置.</p>
<h6 id="日期问题"><a href="#日期问题" class="headerlink" title="日期问题:"></a>日期问题:</h6><p>​	因为日期返回给前端存在问题,所以出现了日期是这样的:<img src="https://s2.loli.net/2024/03/28/WL91hJACMUD8lpv.png" alt="image-20240328214645719"></p>
<p>返回给前端的日期数据是数组.</p>
<p><img src="https://s2.loli.net/2024/03/28/xvfLlFunh1JHbBj.png" alt="image-20240328214806930"></p>
<p>具体就是直接加入扩展的格式化处理即可.</p>
<p>如何给全局加入这个消息转换器?</p>
<p><code>直接继承这个配置父类即可</code><img src="https://s2.loli.net/2024/03/28/chbuVryD3fHkeoL.png" alt="image-20240328215032515"></p>
<p><img src="https://s2.loli.net/2024/03/28/ygmTvkcbrsAnHWU.png" alt="image-20240328215712011"></p>
<p>这里面的JacksonObjectMapper就是对象转换器,看下代码:</p>
<p><img src="https://s2.loli.net/2024/03/28/xPFAsXQ8DeufZ1c.png" alt="image-20240328220005393"></p>
<p>主要是注册一个partten,然后进行时间的转换.</p>
<p>调试代码就能看见确实加入了:<img src="https://s2.loli.net/2024/03/28/DlhKnmR94LU6wdE.png" alt="image-20240328220110446"></p>
<p>加入之后,根据那个日期格式化的模式,就可以使用Spring mvc的自动转换进行日期格式化了.</p>
<h5 id="员工禁用和启用"><a href="#员工禁用和启用" class="headerlink" title="员工禁用和启用:"></a>员工禁用和启用:</h5><p><img src="https://s2.loli.net/2024/03/29/71xoOWgCABUkKDu.png" alt="image-20240329150050936"></p>
<p>基本查询的时候才需要泛型,前端传过来的参数,如果是query,直接使用函数参数接收即可,如果是路径参数,使用注解接收..</p>
<p><img src="https://s2.loli.net/2024/03/29/KQwAYy2lu9zUshE.png" alt="image-20240329150755638"></p>
<p>这种中括号的东西就是路径参数..</p>
<p>一般是这样的逻辑:controller调用service接口,然后再实现这个接口的方法.</p>
<p>最终在Mapper里面去实现对数据库的操作.</p>
<p><img src="https://s2.loli.net/2024/03/29/tUT48iJ7uAVP95I.png" alt="image-20240329151452542"></p>
<p>在Mapper中调用动态SQL:</p>
<p><img src="https://s2.loli.net/2024/03/29/A7pUiqjOQwNH13S.png" alt="image-20240329152019617"></p>
<p>弹幕还是有点用的,没有安装扩展MybatisX就会看不到.</p>
<h3 id="分类管理模块"><a href="#分类管理模块" class="headerlink" title="分类管理模块"></a>分类管理模块</h3><p>具体为:删除时:需要判断是否删除菜品分类下的所有菜品.</p>
<p>简单的判断,还是访问数据库:</p>
<p><img src="https://s2.loli.net/2024/04/08/EBAr15CzpWynL8m.png" alt="image-20240408123730456"></p>
<p>​	公共的字段,重复创建了.</p>
<p>当数据表发生了变化,这些东西都要跟着去改.</p>
<p><img src="C:/Users/13205/AppData/Roaming/Typora/typora-user-images/image-20240408123921187.png" alt="image-20240408123921187"></p>
<p>定义注解,然后注册一个拦截器,使用拦截器把对这些公共字段赋值操作给统一起来.</p>
<p><img src="https://s2.loli.net/2024/04/08/9xdjOF8u6la3WvB.png" alt="image-20240408130753612"></p>
<p><strong>切入点</strong>:<code>说白了就是对哪些类的哪些方法进行拦截.</code></p>
<p>这里拦截规则问chatGPT即可.</p>
<p>前面表达式是锁定了map包下的所有类,然后后面的是锁定有AutoFIll这个注解. </p>
<p><strong>通知</strong>:<code>对代码进行增强的部分.</code></p>
<p><strong>链接点</strong>:<code>通过这个链接点可以获取别的程序得到的参数,然后直接就可以使用这个参数结果</code></p>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p><img src="https://s2.loli.net/2024/04/09/qt5igG6heQ89FxJ.png" alt="image-20240409094223298"></p>
<p>使用阿里云的文件上传服务,然后直接使用这个注解,就会到这里自动查找</p>
<p><img src="https://s2.loli.net/2024/04/09/P3kuvVGfhjbLqDX.png" alt="image-20240409094329080"></p>
<p>这就是注解的作用</p>
<p>这里的配置还是使用引用的方式:<img src="https://s2.loli.net/2024/04/09/HEQaXNyZFoswTLY.png" alt="image-20240409094755581"></p>
<p>然后具体的配置项就是在配置的注解那里.</p>
<p><img src="https://s2.loli.net/2024/04/09/ntOvum7BsLMTFez.png" alt="image-20240409094823696"></p>
<h3 id="苍穹外卖中注解的作用"><a href="#苍穹外卖中注解的作用" class="headerlink" title="苍穹外卖中注解的作用:"></a>苍穹外卖中注解的作用:</h3><p>这四个注解在Java中通常用于不同的用途：</p>
<ol>
<li><code>@Data</code>: <code>@Data</code>注解是Lombok库提供的一个注解，它会自动为类生成一些通用的方法，例如<code>toString()</code>、<code>equals()</code>、<code>hashCode()</code>和<code>getter</code>、<code>setter</code>方法。通过在类上添加<code>@Data</code>注解，可以减少代码量，提高代码的可读性和简洁性。</li>
<li><code>@Builder</code>: <code>@Builder</code>注解同样来自于Lombok库，它可以帮助我们创建Builder模式的构造器。Builder模式可以让我们以一种更加流畅和易读的方式构建对象，尤其在对象拥有多个属性且部分属性是可选的情况下，使用Builder模式可以提高代码的可读性和灵活性。</li>
<li><code>@NoArgsConstructor</code>: <code>@NoArgsConstructor</code>注解同样是Lombok库提供的，它会为类生成一个无参的构造方法。在某些情况下，比如使用反射创建对象或者通过无参构造方法初始化对象时，会需要这样一个无参构造方法。</li>
<li><code>@AllArgsConstructor</code>: <code>@AllArgsConstructor</code>注解也来自于Lombok库，它会为类生成一个包含所有字段的构造方法。这个构造方法可以用于快速地创建对象，并且可以方便地在测试中初始化对象。</li>
</ol>
<p>Spring注解:</p>
<p>这段代码是一个Spring Boot中的控制器类（Controller），主要用于处理与员工（Employee）相关的HTTP请求。下面解释每个注解的作用： </p>
<ol>
<li><code>@RestController</code>：这个注解是Spring框架提供的，它将该类标记为一个RESTful风格的控制器，意味着该控制器中的方法会以JSON格式返回数据，而不是视图。相比于<code>@Controller</code>注解，<code>@RestController</code>注解省略了在每个方法上添加<code>@ResponseBody</code>的步骤，因此更为简洁方便。</li>
<li><code>@RequestMapping(&quot;/admin/employee&quot;)</code>：这个注解指定了处理HTTP请求的URL路径。在这个示例中，所有处理员工相关请求的方法的URL都以”&#x2F;admin&#x2F;employee”开头。通过这种方式，可以将相同类型的请求映射到同一个控制器中进行处理。</li>
<li><code>@Slf4j</code>：这是Lombok库提供的一个注解，用于自动生成日志对象。使用<code>@Slf4j</code>注解后，可以直接使用<code>log</code>对象进行日志记录，无需手动创建。</li>
<li><code>@Autowired</code>：这个注解是Spring框架提供的，用于自动装配（注入）依赖。在这个示例中，通过<code>@Autowired</code>注解，Spring会自动将<code>EmployeeService</code>和<code>JwtProperties</code>的实例注入到<code>EmployeeController</code>中，无需手动创建实例。</li>
<li><code>@PostMapping(&quot;/login&quot;)</code>和<code>@PostMapping(&quot;/logout&quot;)</code>：这是处理POST请求的方法。<code>@PostMapping</code>注解指定了处理POST请求的URL路径。在这个示例中，<code>login()</code>方法处理”&#x2F;admin&#x2F;employee&#x2F;login”路径的POST请求，而<code>logout()</code>方法处理”&#x2F;admin&#x2F;employee&#x2F;logout”路径的POST请求。</li>
<li><code>@RequestBody</code>：这个注解用于将HTTP请求的body部分转换为Java对象。在<code>login()</code>方法中，<code>@RequestBody</code>注解将HTTP请求中的JSON数据转换为<code>EmployeeLoginDTO</code>对象。</li>
<li><code>@ResponseBody</code>：虽然代码中没有显式使用<code>@ResponseBody</code>注解，但是由于<code>@RestController</code>注解的存在，所有返回的对象都会被自动转换为JSON格式并返回给客户端。</li>
</ol>
<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h1 id="部署服创后端项目"><a href="#部署服创后端项目" class="headerlink" title="部署服创后端项目"></a>部署服创后端项目</h1><h2 id="1-安装nodejs"><a href="#1-安装nodejs" class="headerlink" title="1.安装nodejs"></a>1.安装nodejs</h2><p><a href="https://github.com/nodesource/distributions">nodesource&#x2F;distributions: NodeSource Node.js Binary Distributions (github.com)</a></p>
<h2 id="2-安装mongodb"><a href="#2-安装mongodb" class="headerlink" title="2.安装mongodb"></a>2.安装mongodb</h2><p><a href="https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/#std-label-install-mdb-community-ubuntu">Install MongoDB Community Edition on Ubuntu — MongoDB Manual</a></p>
<p>因为要使用副本集模式来使用prisma,则使用下面的教程即可</p>
<p>最好的安装教程就是官方文档</p>
<p><a href="https://www.mongodb.com/docs/manual/tutorial/convert-standalone-to-replica-set/">Convert a Standalone mongod to a Replica Set — MongoDB Manual</a></p>
<h2 id="3-安装redis"><a href="#3-安装redis" class="headerlink" title="3.安装redis"></a>3.安装redis</h2><p>要在 Linux 上安装 Redis，你可以按照以下步骤操作：</p>
<h3 id="方法一：使用包管理器安装（适用于基于-apt-的系统，如-Ubuntu）"><a href="#方法一：使用包管理器安装（适用于基于-apt-的系统，如-Ubuntu）" class="headerlink" title="方法一：使用包管理器安装（适用于基于 apt 的系统，如 Ubuntu）"></a>方法一：使用包管理器安装（适用于基于 apt 的系统，如 Ubuntu）</h3><ol>
<li><p><strong>更新包管理器缓存</strong>：<br>运行以下命令来确保你的包管理器的缓存已经更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>安装 Redis</strong>：<br>运行以下命令来安装 Redis：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install redis-server</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动 Redis</strong>：<br>在安装完成后，Redis 将会自动启动。你可以通过以下命令来检查 Redis 的状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status redis</span><br></pre></td></tr></table></figure>
<p>如果它没有自动启动，你可以使用以下命令手动启动 Redis：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start redis</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">redis-cli ping</span><br></pre></td></tr></table></figure>
<p>如果服务器正在运行，它将返回 <code>PONG</code>。</p>
</li>
</ol>
<p>然后安装yolo的依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install flask</span><br><span class="line"></span><br><span class="line">pip install -r requirement.txt</span><br><span class="line"></span><br><span class="line">pip i ultralytics</span><br><span class="line"></span><br><span class="line">检测是否能够当服务器,先能安装torch</span><br></pre></td></tr></table></figure>

<h1 id="数据的流式获取-chatGPT"><a href="#数据的流式获取-chatGPT" class="headerlink" title="数据的流式获取(chatGPT)"></a>数据的流式获取(chatGPT)</h1><p><img src="https://s2.loli.net/2024/04/15/eE3HBnIJhl7WoaR.png" alt="image-20240415110644859"></p>
<p>这里的响应头是先发送过去,然后代码就执行完了,这个await是在等待响应头发送过去</p>
<p>下面的await是在等待服务器返回数据,等全部返回才把数据给你.</p>
<p>错误示范,不能等响应体全部完成.</p>
<p>正确示范:<img src="C:/Users/13205/AppData/Roaming/Typora/typora-user-images/image-20240415110822108.png" alt="image-20240415110822108"></p>
<p>此时的value是一个三个字符的数据,还需要decoder.</p>
<p>直接借助浏览器的API即可:</p>
<p><img src="https://s2.loli.net/2024/04/15/L4ZOjgRcq3pmV9D.png" alt="image-20240415110956847"></p>
<p>当我需要这个功能的时候,就需要学习对应的文档和知识了.</p>
<h1 id="Linux系统下切换到root用户的三种方法"><a href="#Linux系统下切换到root用户的三种方法" class="headerlink" title="Linux系统下切换到root用户的三种方法"></a>Linux系统下切换到root用户的三种方法</h1><ol>
<li>使用sudo命令<br>执行sudo命令后，输入当前管理员用户的密码，就可以短暂获得超级用户的权限。例如：<br>$ sudo echo ‘Hello, world!’<br>输入当前管理员用户的密码后，系统将执行指定的命令（在这个例子中是echo ‘Hello, world!’）。需要注意的是，使用sudo获得的权限是暂时的，默认情况下5分钟后root权限就失效了。</li>
<li>使用sudo -i命令<br>执行sudo -i命令后，输入当前管理员用户的密码，可以直接进入root用户。例如：<br>$ sudo -i<br>输入当前管理员用户的密码后，系统将切换到root用户，并打开一个新的终端会话。这个命令类似于执行su root命令，但是不需要手动输入root用户的密码。</li>
<li>使用su命令<br>如果想要一直使用root权限，可以通过su命令切换到root用户。首先，需要设置root用户的密码。例如：<br>$ sudo passwd root<br>按照提示输入新的root密码。设置完成后，就可以自由地切换到root用户了。例如：<br>$ su<br>输入root用户的密码后，系统将切换到root用户。如果想回到普通用户权限，直接执行exit命令即可。<br>需要注意的是，以上三种方法都需要当前管理员用户的权限。此外，作为超级用户，需要格外小心操作，以免对系统造成不必要的损害。在完成必要的操作后，应该及时退出root用户，恢复到普通用户身份。</li>
</ol>
<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名:"></a>配置别名:</h2><p><img src="https://s2.loli.net/2024/04/28/mYa1zSLNyij2BRv.png" alt="image-20240428213446959"></p>
<p>直接在这个文件内改即可:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bash_aliases </span><br></pre></td></tr></table></figure>

<p>然后这个文件是官方推荐的,非耦合:</p>
<p><img src="https://s2.loli.net/2024/04/28/4h6QZfR7CtbiH5n.png" alt="image-20240428213534852"></p>
<p>大概就是这样:</p>
<p>直接整就行了</p>
<p>目前我的~&#x2F;.bash_aliases 文件内容:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(root㉿DavidLi)-[/mnt/c/Users/13205]</span><br><span class="line">└─# cat ~/.bash_aliases</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">User specific aliases and <span class="built_in">functions</span></span></span><br><span class="line"></span><br><span class="line">alias rm=&#x27;rm -i&#x27;</span><br><span class="line">alias cp=&#x27;cp -i&#x27;</span><br><span class="line">alias mv=&#x27;mv -i&#x27;</span><br><span class="line">alias dps=&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span><br><span class="line">alias dis=&#x27;docker images&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Source global definitions</span></span><br><span class="line">if [ -f /etc/bashrc ]; then</span><br><span class="line">        . /etc/bashrc</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">┌──(root㉿DavidLi)-[/mnt/c/Users/13205]</span><br><span class="line">└─# vim ~/.bash_aliases</span><br></pre></td></tr></table></figure>



<h2 id="docker部署wire-guerd"><a href="#docker部署wire-guerd" class="headerlink" title="docker部署wire-guerd"></a>docker部署wire-guerd</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fdocker run -d \</span><br><span class="line">  --name=wg-easy \</span><br><span class="line">  -e WG_HOST=123.123.123.123 (🚨这里输入服务器的公网IP) \</span><br><span class="line">  -e PASSWORD=passwd123 (🚨这里输入你的密码) \</span><br><span class="line">  -e WG_DEFAULT_ADDRESS=10.0.8.x （🚨默认IP地址）\</span><br><span class="line">  -e WG_DEFAULT_DNS=114.114.114.114 （🚨默认DNS）\</span><br><span class="line">  -e WG_ALLOWED_IPS=10.0.8.0/24 （🚨允许连接的IP段）\</span><br><span class="line">  -e WG_PERSISTENT_KEEPALIVE=25 （🚨重连间隔）\</span><br><span class="line">  -v ~/.wg-easy:/etc/wireguard \</span><br><span class="line">  -p 51820:51820/udp \</span><br><span class="line">  -p 51821:51821/tcp \</span><br><span class="line">  --cap-add=NET_ADMIN \</span><br><span class="line">  --cap-add=SYS_MODULE \</span><br><span class="line">  --sysctl=&quot;net.ipv4.conf.all.src_valid_mark=1&quot; \</span><br><span class="line">  --sysctl=&quot;net.ipv4.ip_forward=1&quot; \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  weejewel/wg-easy</span><br></pre></td></tr></table></figure>

<p>直接使用本地端口映射docker端口即可.</p>
<h2 id="docker部署mysql"><a href="#docker部署mysql" class="headerlink" title="docker部署mysql"></a>docker部署mysql</h2><p><img src="https://s2.loli.net/2024/04/17/MvHOlsRQKXdpAES.png" alt="image-20240417201010040">zhiji</p>
<p>直接部署mysql到linux.</p>
<p>类似于下载下来一个绿色的免安装版本的软件</p>
<p>就是直接在docker环境里面把那些东西都配置好了.</p>
<p><img src="https://s2.loli.net/2024/04/17/HNWxnm32r7zAX9I.png" alt="image-20240417201322752"></p>
<p>在集群部署上面非常有优势</p>
<p>镜像下载一次可以多次启动.<img src="https://s2.loli.net/2024/04/17/bTJEdYVeoQqGwah.png" alt="image-20240417201507835"></p>
<p>最强大的一集.</p>
<h3 id="命令解读"><a href="#命令解读" class="headerlink" title="命令解读:"></a>命令解读:</h3><p>端口映射,这是我想了解的:</p>
<p>把mysql容器的端口映射到服务器里面的端口</p>
<p><img src="https://s2.loli.net/2024/04/17/9Bzqwe8YJDg7WUC.png" alt="image-20240417214023905"></p>
<p>docker会帮助我们把请求转发到这个容器里面.<code>前面的端口 -p 3307:3306</code></p>
<p>前面的<code>3307</code>是宿主机端口(服务器端口)</p>
<p><img src="https://s2.loli.net/2024/04/17/aJMCNZWEpIt64yz.png" alt="image-20240417213820666"></p>
<p>启动镜像<code>docker start opengauss</code></p>
<p>查看正在运行的镜像:<code>docker ps</code></p>
<p>就能直观的看见端口的映射了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">羡慕了,唉,只是我挑选的位置和没有努力罢了.</span><br><span class="line"></span><br><span class="line">写不出来好看的样式?</span><br><span class="line"></span><br><span class="line">只是没有了解罢了.</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/17/gxiR4p35Knz2YUP.png" alt="image-20240417214205206"></p>
<h2 id="docker基础-基本命令"><a href="#docker基础-基本命令" class="headerlink" title="docker基础(基本命令)"></a>docker基础(基本命令)</h2><p><img src="https://s2.loli.net/2024/04/17/XlpKZ3MExHtNSdn.png" alt="image-20240417222526794"></p>
<p>docker run 是创建并运行容器.</p>
<p>docker ps是process state这个意思.</p>
<p>基本的进入容器内部(把md打开在vscode就可以借助ai去写笔记了但是没有图片上传)</p>
<p><code>docker exec -it &lt;container_name&gt; sh</code></p>
<p>解释:<code>docker exec -it &lt;container_name&gt; sh</code> 是一个用于在 Docker 容器内部执行命令的 Docker CLI 命令。</p>
<p>解释如下：</p>
<ul>
<li><code>docker exec</code>：这是 Docker 命令行工具用于在运行中的容器内部执行命令的子命令。</li>
<li><code>-it</code>：这是两个选项的组合。<code>-i</code> 表示在容器内部保持标准输入流（stdin）打开，<code>-t</code> 表示分配一个伪终端（tty）。这使得我们可以与容器交互式地执行命令，类似于在本地终端中执行命令。</li>
<li><code>&lt;container_name&gt;</code>：这是要执行命令的目标容器的名称或容器ID。指定容器的名称或ID将使命令在该容器内部执行。</li>
<li><code>sh</code>：这是要在容器内部执行的命令，此处是 <code>sh</code>，表示在容器内部运行 bash shell。您可以替换为其他需要在容器内执行的命令。</li>
</ul>
<p>总结起来，<code>docker exec -it &lt;container_name&gt; sh</code> 命令的作用是在指定的 Docker 容器内部启动一个交互式的终端 shell （bash），可以在该终端中运行命令，与容器进行交互，查看容器内部环境，进行调试等操作。</p>
<h3 id="拉取nginx的镜像"><a href="#拉取nginx的镜像" class="headerlink" title="拉取nginx的镜像:"></a>拉取nginx的镜像:</h3><p><a href="http://nginx.org/en/docs/beginners_guide.html#conf_structure">新手指南 — Beginner’s Guide (nginx.org)</a></p>
<p>nginx的新手指南,多看多学.(看官方文档绝对是学习最快的)</p>
<p><code>前提是你看的懂</code></p>
<p>调试使用:不停的打印日志:</p>
<p><img src="https://s2.loli.net/2024/04/17/Q2wAy9rzGDtxdp4.png" alt="image-20240417231425517"></p>
<p>使用bash进入:<code>docker exec -it nginx bash</code></p>
<p><img src="https://s2.loli.net/2024/04/17/tsO2PGQ3wLh9dDS.png" alt="image-20240417232052806"></p>
<p>配置别名:<img src="https://s2.loli.net/2024/04/17/GcJsfgrPYznqF8V.png" alt="image-20240417235634253"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># some more ls aliases</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -l&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">&#x27;ls -A&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">&#x27;ls -CF&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dps=<span class="string">&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dis=<span class="string">&#x27;docker images&#x27;</span></span><br></pre></td></tr></table></figure>

<p>然后执行保存文件</p>
<p>然后<code>source ~/.bashrc</code>应用.</p>
<h2 id="docker数据卷"><a href="#docker数据卷" class="headerlink" title="docker数据卷"></a>docker数据卷</h2><p>volume:</p>
<p><img src="https://s2.loli.net/2024/04/18/b65XEvzDyqM7n9m.png" alt="image-20240418192534276"></p>
<p>你改这_data在容器就会同步更改</p>
<p>数据都会同步,目的是不在容器里面改文件</p>
<p>v-bind双向绑定,修改就直接那个啥,同步</p>
<p>当容器已经创建了,就没法挂载了.</p>
<p><img src="https://s2.loli.net/2024/04/18/fvBpNMdIOJRTwGX.png" alt="image-20240418194641711"></p>
<p><img src="https://s2.loli.net/2024/04/18/Kh1CVkjHNlz2gIJ.png" alt="image-20240418194854877"></p>
<p>直接在这看就行了,复制命令还是快</p>
<p>binlog mysql主从复制用的</p>
<p>当挂载在volume的时候,是固定的这种目录下</p>
<p>使用相对路径就直接识别为本地目录了:</p>
<h3 id="本地目录数据卷"><a href="#本地目录数据卷" class="headerlink" title="本地目录数据卷"></a>本地目录数据卷</h3><p><img src="C:/Users/13205/AppData/Roaming/Typora/typora-user-images/image-20240418204115907.png" alt="image-20240418204115907"></p>
<h2 id="docker部署java项目"><a href="#docker部署java项目" class="headerlink" title="docker部署java项目:"></a>docker部署java项目:</h2><p><img src="https://s2.loli.net/2024/04/28/h3TaZ6uG59FJSOC.png" alt="image-20240428184607709"></p>
<p><img src="https://s2.loli.net/2024/04/28/imMx7rfOGyKwDVF.png" alt="image-20240428184551592"></p>
<p><img src="https://s2.loli.net/2024/04/28/ntGs7wpxTbMNvFf.png" alt="image-20240428185029146"></p>
<p><img src="https://s2.loli.net/2024/04/28/J9N8My3rf5B72we.png" alt="image-20240428192711587"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t docker-demo .</span><br></pre></td></tr></table></figure>

<h2 id="容器网络通信"><a href="#容器网络通信" class="headerlink" title="容器网络通信"></a>容器网络通信</h2><p><img src="https://s2.loli.net/2024/04/28/CGO1VjXNPinS5sH.png" alt="image-20240428193259955"></p>
<p>具有相同的网关.Gateway</p>
<p>说明容器可以相互通信</p>
<p>前16位是不能动得,前两端不能动</p>
<p><img src="https://s2.loli.net/2024/04/28/oI8zG4DXyFOZc61.png" alt="image-20240428194004317"></p>
<p>“172.17.0.4”,前面的<code>172.17</code>不能动,但是后面的:<strong>.0.4</strong>会自增</p>
<p><img src="https://s2.loli.net/2024/04/28/gRtzqNXaCSJbTc3.png" alt="image-20240428194204400"></p>
<p>直接在容器内部ping另外的容器:</p>
<p><img src="https://s2.loli.net/2024/04/28/MU8xjPYXzLSTKlp.png" alt="image-20240428194314474"></p>
<p>但是这个ip是docker自己分配的,所以,当容器重启的时候,ip会改变,如何做到固定的容器通信?</p>
<p><strong>自定义网络</strong></p>
<p><img src="https://s2.loli.net/2024/04/28/eWQH5jryMKBNCZs.png" alt="image-20240428194435767"></p>
<p>创建一个新的网络:<code>heima</code>,然后让容器加入这个网络</p>
<p><img src="https://s2.loli.net/2024/04/28/cgiWZfPIkuapUCM.png" alt="image-20240428194851753"></p>
<p><img src="https://s2.loli.net/2024/04/28/Lim6TAdP8cIjkhr.png" alt="image-20240428194911771"></p>
<p>启动的时候就加入网络:</p>
<p><img src="https://s2.loli.net/2024/04/28/2mekVuKMfL47T8s.png" alt="image-20240428195012622"></p>
<p><img src="https://s2.loli.net/2024/04/28/i2UrDHA3SLEPsFo.png" alt="image-20240428195708052"></p>
<p>先创建网络:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create heima</span><br></pre></td></tr></table></figure>

<p>在直接加入网络:</p>
<p><code>docker network connect heima alist</code></p>
<p><code>docker network connect heima dd</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">└─# docker network connect --help</span><br><span class="line"></span><br><span class="line">Usage:  docker network connect [OPTIONS] NETWORK CONTAINER</span><br><span class="line"></span><br><span class="line">Connect a container to a network</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --alias strings           Add network-scoped alias for the container</span><br><span class="line">      --driver-opt strings      driver options for the network</span><br><span class="line">      --ip string               IPv4 address (e.g., &quot;172.30.100.104&quot;)</span><br><span class="line">      --ip6 string              IPv6 address (e.g., &quot;2001:db8::33&quot;)</span><br><span class="line">      --link list               Add link to another container</span><br><span class="line">      --link-local-ip strings   Add a link-local address for the container</span><br></pre></td></tr></table></figure>

<h2 id="使用docker批量部署容器"><a href="#使用docker批量部署容器" class="headerlink" title="使用docker批量部署容器:"></a>使用docker批量部署容器:</h2><h2 id="3-3-DockerCompose"><a href="#3-3-DockerCompose" class="headerlink" title="3.3.DockerCompose"></a>3.3.DockerCompose</h2><p>大家可以看到，我们部署一个简单的java项目，其中包含3个容器：</p>
<ul>
<li>MySQL</li>
<li>Nginx</li>
<li>Java项目</li>
</ul>
<p>而稍微复杂的项目，其中还会有各种各样的其它中间件，需要部署的东西远不止3个。如果还像之前那样手动的逐一部署，就太麻烦了。</p>
<p>而Docker Compose就可以帮助我们实现<strong>多个相互关联的Docker容器的快速部署</strong>。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器。</p>
<h3 id="3-3-1-基本语法"><a href="#3-3-1-基本语法" class="headerlink" title="3.3.1.基本语法"></a>3.3.1.基本语法</h3><p>docker-compose.yml文件的基本语法可以参考官方文档：</p>
<p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p>
<p>docker-compose文件中可以定义多个相互关联的应用容器，每一个应用容器被称为一个服务（service）。由于service就是在定义某个应用的运行时参数，因此与<code>docker run</code>参数非常相似。</p>
<p>举例来说，用docker run部署MySQL的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  -v ./mysql/data:/var/lib/mysql \</span><br><span class="line">  -v ./mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">  -v ./mysql/init:/docker-entrypoint-initdb.d \</span><br><span class="line">  --network hmall</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure>

<p>如果用<code>docker-compose.yml</code>文件来定义，就是这样：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">new</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">new:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hmall</span></span><br></pre></td></tr></table></figure>

<p>对比如下：</p>
<table>
<thead>
<tr>
<th align="left"><strong>docker run 参数</strong></th>
<th align="left"><strong>docker compose 指令</strong></th>
<th align="left"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">–name</td>
<td align="left">container_name</td>
<td align="left">容器名称</td>
</tr>
<tr>
<td align="left">-p</td>
<td align="left">ports</td>
<td align="left">端口映射</td>
</tr>
<tr>
<td align="left">-e</td>
<td align="left">environment</td>
<td align="left">环境变量</td>
</tr>
<tr>
<td align="left">-v</td>
<td align="left">volumes</td>
<td align="left">数据卷配置</td>
</tr>
<tr>
<td align="left">–network</td>
<td align="left">networks</td>
<td align="left">网络</td>
</tr>
</tbody></table>
<p>明白了其中的对应关系，相信编写<code>docker-compose</code>文件应该难不倒大家。</p>
<p>黑马商城部署文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">  <span class="attr">hmall:</span></span><br><span class="line">    <span class="attr">build:</span> </span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;18080:18080&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;18081:18081&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/nginx.conf:/etc/nginx/nginx.conf&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/html:/usr/share/nginx/html&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">hm-net:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hmall</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-2-基础命令"><a href="#3-3-2-基础命令" class="headerlink" title="3.3.2.基础命令"></a>3.3.2.基础命令</h3><p>编写好docker-compose.yml文件，就可以部署项目了。常见的命令：</p>
<p><a href="https://docs.docker.com/compose/reference/">https://docs.docker.com/compose/reference/</a></p>
<p>基本语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker compose [OPTIONS] [COMMAND]</span><br></pre></td></tr></table></figure>

<p>其中，OPTIONS和COMMAND都是可选参数，比较常见的有：</p>
<table>
<thead>
<tr>
<th align="left"><strong>类型</strong></th>
<th align="left"><strong>参数或指令</strong></th>
<th align="left"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">Options</td>
<td align="left">-f</td>
<td align="left">指定compose文件的路径和名称</td>
</tr>
<tr>
<td align="left">-p</td>
<td align="left">指定project名称。project就是当前compose文件中设置的多个service的集合，是逻辑概念</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Commands</td>
<td align="left">up</td>
<td align="left">创建并启动所有service容器</td>
</tr>
<tr>
<td align="left">down</td>
<td align="left">停止并移除所有容器、网络</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">ps</td>
<td align="left">列出所有启动的容器</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">logs</td>
<td align="left">查看指定容器的日志</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">stop</td>
<td align="left">停止容器</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">start</td>
<td align="left">启动容器</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">restart</td>
<td align="left">重启容器</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">top</td>
<td align="left">查看运行的进程</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">exec</td>
<td align="left">在指定的运行中容器中执行命令</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>教学演示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.进入root目录</span></span><br><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.删除旧容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -qa)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.删除hmall镜像</span></span><br><span class="line">docker rmi hmall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.清空MySQL数据</span></span><br><span class="line"><span class="built_in">rm</span> -rf mysql/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.启动所有, -d 参数是后台启动</span></span><br><span class="line">docker compose up -d</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">[+] Building 15.5s (8/8) FINISHED</span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile                                    0.0s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 358B                                                    0.0s</span><br><span class="line"> =&gt; [internal] load .dockerignore                                                       0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 2B                                                         0.0s</span><br><span class="line"> =&gt; [internal] load metadata <span class="keyword">for</span> docker.io/library/openjdk:11.0-jre-buster             15.4s</span><br><span class="line"> =&gt; [1/3] FROM docker.io/library/openjdk:11.0-jre-buster@sha256:3546a17e6fb4ff4fa681c3  0.0s</span><br><span class="line"> =&gt; [internal] load build context                                                       0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 98B                                                        0.0s</span><br><span class="line"> =&gt; CACHED [2/3] RUN <span class="built_in">ln</span> -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span class="built_in">echo</span>   0.0s</span><br><span class="line"> =&gt; CACHED [3/3] COPY hm-service.jar /app.jar                                           0.0s</span><br><span class="line"> =&gt; exporting to image                                                                  0.0s</span><br><span class="line"> =&gt; =&gt; exporting layers                                                                 0.0s</span><br><span class="line"> =&gt; =&gt; writing image sha256:32eebee16acde22550232f2eb80c69d2ce813ed099640e4cfed2193f71  0.0s</span><br><span class="line"> =&gt; =&gt; naming to docker.io/library/root-hmall                                           0.0s</span><br><span class="line">[+] Running 4/4</span><br><span class="line"> ✔ Network hmall    Created                                                             0.2s</span><br><span class="line"> ✔ Container mysql  Started                                                             0.5s</span><br><span class="line"> ✔ Container hmall  Started                                                             0.9s</span><br><span class="line"> ✔ Container nginx  Started                                                             1.5s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.查看镜像</span></span><br><span class="line">docker compose images</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">CONTAINER           REPOSITORY          TAG                 IMAGE ID            SIZE</span><br><span class="line">hmall               root-hmall          latest              32eebee16acd        362MB</span><br><span class="line">mysql               mysql               latest              3218b38490ce        516MB</span><br><span class="line">nginx               nginx               latest              605c77e624dd        141MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.查看容器</span></span><br><span class="line">docker compose ps</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">NAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTS</span><br><span class="line">hmall               root-hmall          <span class="string">&quot;java -jar /app.jar&quot;</span>     hmall               54 seconds ago      Up 52 seconds       0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp</span><br><span class="line">mysql               mysql               <span class="string">&quot;docker-entrypoint.s…&quot;</span>   mysql               54 seconds ago      Up 53 seconds       0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp</span><br><span class="line">nginx               nginx               <span class="string">&quot;/docker-entrypoint.…&quot;</span>   nginx               54 seconds ago      Up 52 seconds       80/tcp, 0.0.0.0:18080-18081-&gt;18080-18081/tcp, :::18080-18081-&gt;18080-18081/tcp</span><br></pre></td></tr></table></figure>

<p>打开浏览器，访问：http:&#x2F;&#x2F;${你的虚拟机ip}:8080</p>
<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><p><a href="https://www.bilibili.com/read/cv27497248/?jump_opus=1">计算机网络视频问题回答 - 哔哩哔哩 (bilibili.com)</a></p>
<h1 id="黑马点评"><a href="#黑马点评" class="headerlink" title="黑马点评"></a>黑马点评</h1><h2 id="项目起步"><a href="#项目起步" class="headerlink" title="项目起步"></a>项目起步</h2><h3 id="使用session实现登录"><a href="#使用session实现登录" class="headerlink" title="使用session实现登录"></a>使用session实现登录</h3><p><img src="https://s2.loli.net/2024/04/21/cjFv1feQxB8suT9.png" alt="image-20240421211018548"></p>
<h3 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证:"></a>登录验证:</h3><p><img src="https://s2.loli.net/2024/04/22/CgLREZhN7lzJ6ye.png" alt="image-20240422115117043"></p>
<p>经典存储到ThreadLocal里面</p>
<h3 id="存储验证码到Redis"><a href="#存储验证码到Redis" class="headerlink" title="存储验证码到Redis"></a>存储验证码到Redis</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br></pre></td></tr></table></figure>



<p>这段代码是在Java中使用Spring框架进行依赖注入的一个例子。</p>
<p><code>@Resource</code> 是Java的一个注解，用于在没有明确指定bean名称的情况下，按名称或类型自动装配bean。在这个例子中，它告诉Spring框架自动注入一个类型为<code>StringRedisTemplate</code>的bean到<code>stringRedisTemplate</code>字段。</p>
<p><code>StringRedisTemplate</code> 是Spring Data Redis模块的一部分，它是一个帮助类，用于简化Redis数据访问的操作。它提供了一系列的方法来执行Redis命令，包括对字符串、哈希、列表、集合等数据类型的操作。</p>
<p><code>private</code> 关键字表示这个字段只能在当前类中访问。</p>
<p>总的来说，这段代码的意思是：在当前类中创建一个私有字段<code>stringRedisTemplate</code>，并请求Spring框架自动注入一个类型为<code>StringRedisTemplate</code>的bean。</p>
<h2 id="Redis使用"><a href="#Redis使用" class="headerlink" title="Redis使用:"></a>Redis使用:</h2><p><img src="https://s2.loli.net/2024/04/23/vmxH7oJ5wKiAVSY.png" alt="image-20240423225711169"></p>
<p>也是一块内存空间</p>
<p>Redis的读写速度非常快,一般是ms级别,而且数据库中也存在缓存</p>
<p>CPU中三级缓存</p>
<p>如果请求不大的话,暂时用不到缓存了:</p>
<p><img src="https://s2.loli.net/2024/04/23/heEGDCi78qMr1Qs.png" alt="image-20240423230128101"></p>
<p><a href="https://blog.csdn.net/weixin_61341342/article/details/133840026">【Redis】Java Spring操作redis-CSDN博客</a></p>
<p>常量类的使用:</p>
<p><a href="https://blog.csdn.net/jh1141233305/article/details/121171142">Intellij IDEA 保存时自动格式化代码_idea代码自动格式化-CSDN博客</a></p>
<p><img src="https://s2.loli.net/2024/04/23/PbE3m42Kri1SgMX.png" alt="image-20240423230506160"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConstants</span> &#123;</span><br><span class="line">    <span class="comment">//经典常量类,然后避免硬编码,确实是一个好的编程习惯</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOGIN_CODE_KEY</span> <span class="operator">=</span> <span class="string">&quot;login:code:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">LOGIN_CODE_TTL</span> <span class="operator">=</span> <span class="number">2L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOGIN_USER_KEY</span> <span class="operator">=</span> <span class="string">&quot;login:token:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">LOGIN_USER_TTL</span> <span class="operator">=</span> <span class="number">36000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">CACHE_NULL_TTL</span> <span class="operator">=</span> <span class="number">2L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">CACHE_SHOP_TTL</span> <span class="operator">=</span> <span class="number">30L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CACHE_SHOP_KEY</span> <span class="operator">=</span> <span class="string">&quot;cache:shop:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_SHOP_KEY</span> <span class="operator">=</span> <span class="string">&quot;lock:shop:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">LOCK_SHOP_TTL</span> <span class="operator">=</span> <span class="number">10L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECKILL_STOCK_KEY</span> <span class="operator">=</span> <span class="string">&quot;seckill:stock:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BLOG_LIKED_KEY</span> <span class="operator">=</span> <span class="string">&quot;blog:liked:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FEED_KEY</span> <span class="operator">=</span> <span class="string">&quot;feed:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SHOP_GEO_KEY</span> <span class="operator">=</span> <span class="string">&quot;shop:geo:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER_SIGN_KEY</span> <span class="operator">=</span> <span class="string">&quot;sign:&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="短信缓存登录"><a href="#短信缓存登录" class="headerlink" title="短信缓存登录"></a>短信缓存登录</h3><p>当用户不断访问我这个接口,我就刷新有效期,放到拦截器实现</p>
<p><img src="https://s2.loli.net/2024/04/26/3jPoXAqRKrsaIB1.png" alt="image-20240426144115927"></p>
<p>逻辑具体实现 </p>
<p>StringRedisTemplete要求的字段类型都是string ,而此时转过来的是long id类型,所以,必须转换成String.</p>
<p>最终存储到数据库中的样子:</p>
<p><img src="https://s2.loli.net/2024/04/26/ybgjPsdx9AqUQB6.png" alt="image-20240426215715641"></p>
<p>最终的逻辑流程图:</p>
<p><img src="https://s2.loli.net/2024/04/26/XvsuqY1HGObULER.png" alt="image-20240426221151505"></p>
<p>这里的key一个选择phone作为key</p>
<p>一个选择随机生成的字符串为token.</p>
<p><img src="https://s2.loli.net/2024/04/26/WB6a75zMNO1oVXF.png" alt="image-20240426221249669"></p>
<p>比如<code>对象结构</code>就可以使用hash结构存储,嘻嘻&#x2F;</p>
<p>存储粒度的意思就是,一个是<img src="https://s2.loli.net/2024/04/26/LeCRsrSON31UJhK.png" alt="image-20240426221433325"></p>
<p>一个是这么多:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码，加密存储</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 昵称，默认是随机字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户头像</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">icon</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>信息存储的密度就是存储粒度,直接存少一点,把颗粒度降低一些.</p>
<h3 id="解决状态登录刷新"><a href="#解决状态登录刷新" class="headerlink" title="解决状态登录刷新"></a>解决状态登录刷新</h3><p>在原有的逻辑基础上</p>
<p>抽象出来一个新的拦截器,然后在这个拦截器上面做用户token的刷新.</p>
<p><img src="https://s2.loli.net/2024/04/26/SRPtvUchTqW4ayg.png" alt="image-20240426223538869"></p>
<h3 id="商户信息添加缓存"><a href="#商户信息添加缓存" class="headerlink" title="商户信息添加缓存:"></a>商户信息添加缓存:</h3><p>先在java代码里面找contraller </p>
<p>具体的查询逻辑:</p>
<p><img src="https://s2.loli.net/2024/04/26/spvEhJfY14gu3l6.png" alt="image-20240426225656041"></p>
<p><img src="https://s2.loli.net/2024/04/26/xM4vjkDQy6CP38S.png" alt="image-20240426225754485"></p>
<p>controller负责调用service的代码,具体的业务流程放到shopService里面</p>
<p>思路:先查缓存,缓存没有再查sql.<img src="https://s2.loli.net/2024/04/26/Zw6XAQdVeghfm4K.png" alt="image-20240426230527530"></p>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>ctrl+e </p>
<p>alt shift r</p>
<p>double shift</p>
<p>alt insert</p>
<p>.var</p>
<p>.sout</p>
<p>alt enter </p>
<h1 id="任务考核"><a href="#任务考核" class="headerlink" title="任务考核"></a>任务考核</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h2><p>针对你的问题，我将分别进行详细解答：</p>
<p><strong>1.</strong> <em><strong>*接口的优化方式有哪些（具体说说，用代码写出来）*</strong></em></p>
<p><strong>2.</strong> <em><strong>*在修改语句（update）中根据字段行修改，是行锁还是表锁，为什么？在设计表的时候哪些细节？（写出sql语句）*</strong></em></p>
<p><strong>3.</strong> <em><strong>*设计消息表（类似qq消息，设计表结构，写出相应sql语句）*</strong></em></p>
<p><em><strong>*在期末之前，作为你们的考核*</strong></em></p>
<p><a href="https://cloud.tencent.com/developer/article/1850835">三分钟入门 InnoDB 存储引擎中的表锁和行锁-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://mikechen.cc/5018.html">MySQL悲观锁与乐观锁、行锁与表锁、共享锁 – mikechen</a></p>
<p>[什么是行锁或表锁 - Google 搜索](<a href="https://www.google.com/search?q=">https://www.google.com/search?q=</a> 什么是行锁或表锁&amp;sca_esv&#x3D;6a2cd9fc01b49543&amp;sca_upv&#x3D;1&amp;sxsrf&#x3D;ACQVn0-5SJnthgE6iVMSH5llUZ0CKpxV-w%3A1713881521508&amp;ei&#x3D;scEnZoPsHdiB2roP5YmOkAM&amp;ved&#x3D;0ahUKEwjDiJqawtiFAxXYgFYBHeWEAzIQ4dUDCBA&amp;uact&#x3D;5&amp;oq&#x3D; 什么是行锁或表锁&amp;gs_lp&#x3D;Egxnd3Mtd2l6LXNlcnAiGQrku4DkuYjmmK_ooYzplIHmiJbooajplIFIAFAAWABwAHgBkAEAmAEAoAEAqgEAuAEDyAEA-AEC-AEBmAIAoAIAmAMAkgcAoAcA&amp;sclient&#x3D;gws-wiz-serp)</p>
<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">好的，我会逐个回答您的问题，并提供相应的代码示例。</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 接口的优化方式</span><br><span class="line">接口优化通常关注几个主要方面：减少网络调用的次数和量、缓存机制的使用、并发处理、以及数据库查询优化等。</span><br><span class="line"></span><br><span class="line">示例代码：使用缓存来优化API</span><br><span class="line">以 Python Flask 应用为例，使用 Redis 缓存来减少数据库查询：</span><br><span class="line"></span><br><span class="line">python</span><br><span class="line">Copy code</span><br><span class="line">from flask import Flask, request</span><br><span class="line">import redis</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">app = Flask(<span class="strong">__name__</span>)</span><br><span class="line">cache = redis.Redis(host=&#x27;localhost&#x27;, port=6379, db=0)</span><br><span class="line"></span><br><span class="line">def get<span class="emphasis">_user_</span>from<span class="emphasis">_db(user_</span>id):</span><br><span class="line"><span class="code">    # 模拟数据库查询</span></span><br><span class="line"><span class="code">    return &#123;&quot;id&quot;: user_id, &quot;name&quot;: &quot;John Doe&quot;&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">@app.route(&#x27;/user/<span class="language-xml"><span class="tag">&lt;<span class="name">int:user_id</span>&gt;</span></span>&#x27;)</span><br><span class="line">def get<span class="emphasis">_user(user_</span>id):</span><br><span class="line"><span class="code">    user = cache.get(f&quot;user:&#123;user_id&#125;&quot;)</span></span><br><span class="line"><span class="code">    if not user:</span></span><br><span class="line"><span class="code">        user = get_user_from_db(user_id)</span></span><br><span class="line"><span class="code">        cache.setex(f&quot;user:&#123;user_id&#125;&quot;, 3600, json.dumps(user))  # 缓存1小时</span></span><br><span class="line"><span class="code">    else:</span></span><br><span class="line"><span class="code">        user = json.loads(user)</span></span><br><span class="line"><span class="code">    return user</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">if <span class="strong">__name__</span> == &#x27;<span class="strong">__main__</span>&#x27;:</span><br><span class="line"><span class="code">    app.run(debug=True)</span></span><br><span class="line"><span class="code">2. 修改语句中的锁定行为</span></span><br><span class="line"><span class="code">在 SQL 数据库中，是否使用行锁或表锁取决于数据库的类型以及其事务隔离级别。在 InnoDB 这样的行级锁定存储引擎中，UPDATE 语句通常使用行锁，因为它只锁定那些实际将被修改的记录。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">示例 SQL：优化表的设计，增加索引</span><br><span class="line">sql</span><br><span class="line">Copy code</span><br><span class="line">CREATE TABLE users (</span><br><span class="line"><span class="code">    id INT AUTO_INCREMENT PRIMARY KEY,</span></span><br><span class="line"><span class="code">    username VARCHAR(50),</span></span><br><span class="line"><span class="code">    email VARCHAR(50),</span></span><br><span class="line"><span class="code">    status TINYINT DEFAULT 1,</span></span><br><span class="line"><span class="code">    INDEX status_index (status)</span></span><br><span class="line"><span class="code">);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">-- 使用索引进行更新，可以更快地定位到具体的行</span><br><span class="line">UPDATE users SET status = 0 WHERE id = 123;</span><br><span class="line">这个例子中，给 status 字段添加索引可以帮助数据库更快地找到需要更新的行，尤其是在涉及到大量数据的查询中。</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 设计消息表</span><br><span class="line">针对类似 QQ 的消息系统，我们需要考虑消息的发送方、接收方、内容、时间戳等信息。</span><br><span class="line"></span><br><span class="line">示例 SQL：创建消息表</span><br><span class="line">sql</span><br><span class="line">Copy code</span><br><span class="line">CREATE TABLE messages (</span><br><span class="line"><span class="code">    id BIGINT AUTO_INCREMENT PRIMARY KEY,</span></span><br><span class="line"><span class="code">    sender_id BIGINT NOT NULL,</span></span><br><span class="line"><span class="code">    receiver_id BIGINT NOT NULL,</span></span><br><span class="line"><span class="code">    message_text TEXT,</span></span><br><span class="line"><span class="code">    sent_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,</span></span><br><span class="line"><span class="code">    read_time TIMESTAMP NULL,</span></span><br><span class="line"><span class="code">    INDEX sender_index (sender_id),</span></span><br><span class="line"><span class="code">    INDEX receiver_index (receiver_id)</span></span><br><span class="line"><span class="code">);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">-- 外键示例，假设已经有一个users表</span><br><span class="line">ALTER TABLE messages</span><br><span class="line">ADD CONSTRAINT fk<span class="emphasis">_messages_</span>sender</span><br><span class="line">FOREIGN KEY (sender<span class="emphasis">_id) REFERENCES users(id),</span></span><br><span class="line"><span class="emphasis">ADD CONSTRAINT fk_</span>messages<span class="emphasis">_receiver</span></span><br><span class="line"><span class="emphasis">FOREIGN KEY (receiver_</span>id) REFERENCES users(id);</span><br><span class="line">这里，messages 表具备基本的字段，如发送者ID (sender<span class="emphasis">_id)、接收者ID (receiver_</span>id)、消息内容 (message<span class="emphasis">_text)、发送时间 (sent_</span>time) 和读取时间 (read<span class="emphasis">_time)。此外，添加了发送者和接收者的索引以优化查询性能，如果需要，还可以设置外键约束确保数据的完整性。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">以上就是对您的三个问题的回答和相应的代码示例。希望这些回答和代码能符合您的期望。如果您有任何其他问题或需要进一步的解释，请随时告诉我！</span></span><br></pre></td></tr></table></figure>



<h3 id="1-接口的优化方式"><a href="#1-接口的优化方式" class="headerlink" title="1. 接口的优化方式"></a>1. 接口的优化方式</h3><p>接口优化主要关注于提高响应速度和减少资源消耗，以下是一些常见的优化方法：</p>
<ul>
<li><p><strong>缓存机制</strong>：对于不频繁更改的数据，使用缓存来减少数据库访问次数。常用的缓存策略包括内存缓存（如 Redis）和应用级缓存。</p>
</li>
<li><p><strong>异步处理</strong>：对于耗时操作（如发送邮件、处理大量数据等），可以采用异步处理方式，提高接口的响应速度。</p>
</li>
<li><p><strong>减少数据传输量</strong>：通过压缩数据或减少不必要的数据传输，例如使用 gzip 压缩响应体，或精简返回的数据结构。</p>
</li>
<li><p><strong>接口分页</strong>：对于大量数据的查询，使用分页技术，减少单次请求处理的数据量。</p>
</li>
<li><p><strong>负载均衡</strong>：使用负载均衡技术分散请求到多个服务器，以平衡系统负载。</p>
</li>
<li><p><strong>数据库优化</strong>：包括合理设计索引、优化查询语句、使用合适的事务隔离级别等。</p>
</li>
<li><p><strong>限流与熔断</strong>：通过限流防止接口被过度调用，熔断则在下游服务不可用时保护系统。</p>
</li>
</ul>
<h3 id="2-修改语句的锁选择与数据库表设计细节"><a href="#2-修改语句的锁选择与数据库表设计细节" class="headerlink" title="2. 修改语句的锁选择与数据库表设计细节"></a>2. 修改语句的锁选择与数据库表设计细节</h3><ul>
<li><p><strong>锁的选择（行锁还是表锁）</strong>：</p>
<ul>
<li><strong>行锁</strong>：适用于访问量大但单次访问涉及数据量小的情况。行锁可以减少锁竞争，提高并发性。</li>
<li><strong>表锁</strong>：适用于单次访问涉及大量数据或全表操作的场景。表锁简单但会显著影响并发性。</li>
</ul>
</li>
<li><p><strong>设计表时的数据库细节</strong>：</p>
<ul>
<li><strong>合理使用索引</strong>：索引可以加快查询速度，但应避免过度索引，因为索引会增加写操作的成本。</li>
<li><strong>规范数据类型</strong>：选择合适的数据类型可以减少存储空间并提高处理速度。</li>
<li><strong>避免冗余</strong>：减少数据冗余可以提高数据一致性，但在某些情况下适当的冗余可以提高查询性能。</li>
<li><strong>使用外键与约束</strong>：确保数据完整性和一致性。</li>
<li><strong>考虑分区和分表</strong>：对于非常大的表，可以考虑分区或分表来提高性能。</li>
</ul>
</li>
</ul>
<h3 id="3-设计消息表"><a href="#3-设计消息表" class="headerlink" title="3. 设计消息表"></a>3. 设计消息表</h3><p>设计一个消息表通常需要考虑以下字段：</p>
<ul>
<li><strong>ID</strong>：唯一标识符，通常为主键。</li>
<li><strong>SenderID</strong>：发送者的唯一标识符。</li>
<li><strong>ReceiverID</strong>：接收者的唯一标识符。</li>
<li><strong>MessageContent</strong>：消息内容。</li>
<li><strong>Timestamp</strong>：消息发送的时间戳。</li>
<li><strong>Status</strong>：消息状态（如已读、未读）。</li>
<li><strong>MessageType</strong>：消息类型（如文本、图片）。</li>
</ul>
<p>示例 SQL 创建消息表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Messages (</span><br><span class="line">    MessageID <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    SenderID <span class="type">INT</span>,</span><br><span class="line">    ReceiverID <span class="type">INT</span>,</span><br><span class="line">    MessageContent TEXT,</span><br><span class="line">    <span class="type">Timestamp</span> DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    Status ENUM(<span class="string">&#x27;unread&#x27;</span>, <span class="string">&#x27;read&#x27;</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;unread&#x27;</span>,</span><br><span class="line">    MessageType ENUM(<span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Messages</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> FK_SenderID <span class="keyword">FOREIGN</span> KEY (SenderID) <span class="keyword">REFERENCES</span> Users(UserID),</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> FK_ReceiverID <span class="keyword">FOREIGN</span> KEY (ReceiverID) <span class="keyword">REFERENCES</span> Users(UserID);</span><br></pre></td></tr></table></figure>

<p>这个表结构设计旨在保证基本的消息传递功能，同时包括外键约束以确保参照完整性。</p>
<p>以上就是对你问题的详细解答，如果你有更</p>
<p>具体的场景或需要进一步的解析，请告诉我。</p>
<h1 id="实现二维码登录"><a href="#实现二维码登录" class="headerlink" title="实现二维码登录"></a>实现二维码登录</h1><h2 id="代码使用NODE"><a href="#代码使用NODE" class="headerlink" title="代码使用NODE"></a>代码使用NODE</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">学到的</span><br><span class="line"><span class="comment">// const qr = require(&quot;qrcode&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const generateQRCode = async (text, filePath) =&gt; &#123;</span></span><br><span class="line"><span class="comment">// 	try &#123;</span></span><br><span class="line"><span class="comment">// 		await qr.toFile(filePath, text);</span></span><br><span class="line"><span class="comment">// 		console.log(&quot;QR code generated successfully!&quot;);</span></span><br><span class="line"><span class="comment">// 	&#125; catch (error) &#123;</span></span><br><span class="line"><span class="comment">// 		console.error(&quot;Failed to generate QR code:&quot;, error);</span></span><br><span class="line"><span class="comment">// 	&#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const text = &quot;Hello, world!&quot;;</span></span><br><span class="line"><span class="comment">// const filePath = &quot;./QRCODE/QRCode.png&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// generateQRCode(text, filePath);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const uuid = require(&quot;uuid&quot;);</span></span><br><span class="line"><span class="comment">// let id = uuid.v4();</span></span><br><span class="line"><span class="comment">// console.log(&quot;In index.js id::: &quot;, id);</span></span><br><span class="line"><span class="comment">// 生成唯一的标识符.</span></span><br><span class="line"><span class="comment">// dd1fae6f-5d03-453a-a3ef-702b61a1b586</span></span><br><span class="line"><span class="comment">// e3b5929b-3f7a-4ba7-a196-221a38d32336</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取本机IPV4地址</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getIPv4</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> interfaces = os.<span class="title function_">networkInterfaces</span>();</span><br><span class="line">	<span class="comment">// console.log(&quot;In tests.js interfaces::: &quot;, interfaces);</span></span><br><span class="line">	<span class="keyword">let</span> ipv4Address = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> devName <span class="keyword">in</span> interfaces) &#123;</span><br><span class="line">		<span class="comment">// console.log(&quot;In tests.js devName::: &quot;, devName);</span></span><br><span class="line">		<span class="keyword">const</span> iface = interfaces[devName];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; iface.<span class="property">length</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">const</span> alias = iface[i];</span><br><span class="line">			<span class="comment">// console.log(&quot;In tests.js alias::: &quot;, alias);</span></span><br><span class="line">			<span class="keyword">if</span> (</span><br><span class="line">				alias.<span class="property">family</span> === <span class="string">&quot;IPv4&quot;</span> &amp;&amp;</span><br><span class="line">				alias.<span class="property">address</span> !== <span class="string">&quot;127.0.0.1&quot;</span> &amp;&amp;</span><br><span class="line">				!alias.<span class="property">internal</span></span><br><span class="line">			) &#123;</span><br><span class="line">				ipv4Address = alias.<span class="property">address</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ipv4Address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;本机的IPv4地址是:&quot;</span>, <span class="title function_">getIPv4</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后端示例代码</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>); <span class="comment">// 引入Express框架</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">QRCode</span> = <span class="built_in">require</span>(<span class="string">&quot;qrcode&quot;</span>); <span class="comment">// 引入生成二维码的库</span></span><br><span class="line"><span class="keyword">const</span> uuid = <span class="built_in">require</span>(<span class="string">&quot;uuid&quot;</span>); <span class="comment">// 引入生成唯一标识符的库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>(); <span class="comment">// 创建Express应用实例</span></span><br><span class="line"><span class="keyword">const</span> loginDb = <span class="keyword">new</span> <span class="title class_">Map</span>(); <span class="comment">// 创建临时登录数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成二维码</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/qrcode&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> loginId = uuid.<span class="title function_">v4</span>(); <span class="comment">// 生成唯一的登录ID</span></span><br><span class="line">	loginDb.<span class="title function_">set</span>(loginId, &#123; <span class="attr">userId</span>: <span class="string">&quot;example_user&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;pending&quot;</span> &#125;); <span class="comment">// 将登录ID和用户信息存入临时登录数据库</span></span><br><span class="line"></span><br><span class="line">	<span class="title class_">QRCode</span>.<span class="title function_">toDataURL</span>(<span class="string">`http://localhost:3000/login/<span class="subst">$&#123;loginId&#125;</span>`</span>, <span class="function">(<span class="params">err, url</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">//生成Base64格式的二维码,保存的信息是: http://localhost:3000/login/$&#123;loginId&#125;</span></span><br><span class="line">		<span class="keyword">if</span> (err) <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(err.<span class="property">message</span>); <span class="comment">// 如果生成二维码出错，返回500错误</span></span><br><span class="line">		res.<span class="title function_">json</span>(&#123; <span class="attr">qrcodeUrl</span>: url, loginId &#125;); <span class="comment">// 返回包含二维码URL和登录ID的JSON数据</span></span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扫码登录</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/login/:loginId&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> loginId = req.<span class="property">params</span>.<span class="property">loginId</span>; <span class="comment">// 获取登录ID</span></span><br><span class="line">	<span class="keyword">const</span> loginData = loginDb.<span class="title function_">get</span>(loginId); <span class="comment">// 从临时登录数据库中获取登录信息</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!loginData) &#123;</span><br><span class="line">		<span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&quot;Invalid login ID&quot;</span>); <span class="comment">// 如果登录ID无效，返回404错误</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	loginData.<span class="property">status</span> = <span class="string">&quot;scanned&quot;</span>; <span class="comment">// 更新登录状态为已扫码</span></span><br><span class="line">	loginDb.<span class="title function_">set</span>(loginId, loginData); <span class="comment">// 更新临时登录数据库中的登录信息</span></span><br><span class="line">	res.<span class="title function_">send</span>(<span class="string">&quot;Login successful&quot;</span>); <span class="comment">// 返回登录成功消息</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮询登录状态</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/poll/:loginId&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> loginId = req.<span class="property">params</span>.<span class="property">loginId</span>; <span class="comment">// 获取登录ID</span></span><br><span class="line">	<span class="keyword">const</span> loginData = loginDb.<span class="title function_">get</span>(loginId); <span class="comment">// 从临时登录数据库中获取登录信息</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!loginData) &#123;</span><br><span class="line">		<span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&quot;Invalid login ID&quot;</span>); <span class="comment">// 如果登录ID无效，返回404错误</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	res.<span class="title function_">json</span>(loginData); <span class="comment">// 返回包含登录信息的JSON数据</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server started on port 3000&quot;</span>); <span class="comment">// 启动服务器，监听3000端口</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="生成唯一标识符-nodejs"><a href="#生成唯一标识符-nodejs" class="headerlink" title="生成唯一标识符(nodejs)"></a>生成唯一标识符(nodejs)</h2><p><img src="https://s2.loli.net/2024/04/22/AbSRHlrEwgY1GBs.png" alt="image-20240422111250433"></p>
<p><img src="https://s2.loli.net/2024/04/22/zh6blU4dwRog7Fn.png" alt="image-20240422111304579"></p>
<p><code>展示二维码的页面，如何在二维码被扫码后，自动触发登录跳转。 其实简单理解就是网页展示二维码之后，在后端存一个标记，然后不间断查看标记状态，而二维码是个网址，这个网址被访问后经过一系列检验登录，会修改标记状态。当展示二维码页面查看到标记更新后，就执行后面流程。</code></p>
<p><img src="https://s2.loli.net/2024/04/22/eDgYdE8PwhiMOF5.png" alt="image-20240422105048404"></p>
<p>等待扫描,扫描了但是没点登录,登录点击,完成逻辑.</p>
<p>客户端不断轮询,询问服务端,我的二维码有没有变</p>
<p><img src="https://s2.loli.net/2024/04/22/7nkGm9XPFKRiO4H.png" alt="image-20240422105216160"></p>
<p>临时token,验证用户身份,使用一次失效.</p>
<p>流程:<img src="https://s2.loli.net/2024/04/22/xJ4kYmor8G39Pu2.png" alt="image-20240422105348693"></p>
<p><img src="https://s2.loli.net/2024/04/22/fPq3CgQARNsFc6a.png" alt="image-20240422105642060"></p>
<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h3 id="同步调用"><a href="#同步调用" class="headerlink" title="同步调用"></a>同步调用</h3><p>作为消息队列,充当大量请求的缓冲层.</p>
<p><img src="https://s2.loli.net/2024/04/26/5Ar8qJLKlB4sFQU.png" alt="image-20240426132253043"></p>
<p>每次提出新需求就开始修改之前的代码.</p>
<p>面向修改关闭</p>
<p>面向扩展开放</p>
<p>不知道的先学着,后面随着知识面的扩展,回过头看,就知道怎么学了,就看得懂了 </p>
<p>看视频确实轻松啊,知识也能学到,写一写笔记就行了.</p>
<p><img src="https://s2.loli.net/2024/04/26/jPNK8keD9ZfVhOX.png" alt="image-20240426134449603"></p>
<p>性能太差,各种服务累积执行,此时支付服务在等待,在等待CPU</p>
<p><img src="https://s2.loli.net/2024/04/26/2lOXmfxAerFZ6Dk.png" alt="image-20240426135034967"></p>
<p>把除了支付的那些服务全部变成异步调用,使用MessageQueue(消息队列)</p>
<p><img src="https://s2.loli.net/2024/04/26/iUSFRaEoZn49swM.png" alt="image-20240426135131079"></p>
<h3 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用:"></a>异步调用:</h3><p><img src="https://s2.loli.net/2024/04/26/YGhLMd6f2DBFT7y.png" alt="image-20240426142207198"></p>
<p><img src="https://s2.loli.net/2024/04/26/JOsYbFdVPx7Ktr6.png" alt="image-20240426142311309"></p>
<p>严格同步的保持原本代码,</p>
<p>但是<code>业务关联度</code>低的服务就直接发送消息到Broker,然后进行进程之间的解耦.</p>
<p>我的主进程<strong>支付服务</strong>直接发送完毕消息就继续执行我接下来的逻辑,然后其他三个接收到消息,就执行他们的逻辑,</p>
<p>运行相关的代码.</p>
<p><img src="https://s2.loli.net/2024/04/26/TezbQuo8hHYdvt3.png" alt="image-20240426142810861"></p>
<p>当流量突增,把这些数据的执行函数信号抽象成一条消息,然后缓存到消息队列里面,当我接受到消息,触发对应的逻辑,然后我再处理,起到流量整形的作用.拿不到对方进程的结果</p>
<p><img src="https://s2.loli.net/2024/04/26/e5dLXtQFlpOHIC4.png" alt="image-20240426143034150"></p>
<p><code>Broker:代理人,经纪人</code></p>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>根据您提供的 <code>employees</code> 数据库结构和常见的业务需求，我们可以为不同的用户角色设计合适的权限。在这个例子中，我们将定义三种角色：</p>
<ol>
<li><strong>薪资管理人员</strong>：能够访问 <code>salary</code> 表进行查看、更新和插入操作，还能查看 <code>employee</code> 表的信息。</li>
<li><strong>部门管理人员</strong>：能够管理部门信息、部门员工和部门经理的信息。</li>
<li><strong>HR管理人员</strong>：能够进行员工信息的全面管理，包括新增、修改和删除。</li>
</ol>
<h3 id="步骤-1-创建角色和用户"><a href="#步骤-1-创建角色和用户" class="headerlink" title="步骤 1: 创建角色和用户"></a>步骤 1: 创建角色和用户</h3><h4 id="创建薪资管理人员的角色和用户"><a href="#创建薪资管理人员的角色和用户" class="headerlink" title="创建薪资管理人员的角色和用户"></a>创建薪资管理人员的角色和用户</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建角色</span></span><br><span class="line"><span class="keyword">CREATE</span> ROLE role_salary_manager NOLOGIN;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 赋予权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> employees.salary <span class="keyword">TO</span> role_salary_manager;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> employees.employee <span class="keyword">TO</span> role_salary_manager;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> salary_manager1 <span class="keyword">WITH</span> PASSWORD <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> salary_manager2 <span class="keyword">WITH</span> PASSWORD <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 赋予角色给用户</span></span><br><span class="line"><span class="keyword">GRANT</span> role_salary_manager <span class="keyword">TO</span> salary_manager1, salary_manager2;</span><br></pre></td></tr></table></figure>

<h4 id="创建部门管理人员的角色和用户"><a href="#创建部门管理人员的角色和用户" class="headerlink" title="创建部门管理人员的角色和用户"></a>创建部门管理人员的角色和用户</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建角色</span></span><br><span class="line"><span class="keyword">CREATE</span> ROLE role_department_manager NOLOGIN;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 赋予权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">INSERT</span>, <span class="keyword">DELETE</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> employees.department <span class="keyword">TO</span> role_department_manager;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">INSERT</span>, <span class="keyword">DELETE</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> employees.department_employee <span class="keyword">TO</span> role_department_manager;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">INSERT</span>, <span class="keyword">DELETE</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> employees.department_manager <span class="keyword">TO</span> role_department_manager;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> dept_manager <span class="keyword">WITH</span> PASSWORD <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 赋予角色给用户</span></span><br><span class="line"><span class="keyword">GRANT</span> role_department_manager <span class="keyword">TO</span> dept_manager;</span><br></pre></td></tr></table></figure>

<h4 id="创建HR管理人员的角色和用户"><a href="#创建HR管理人员的角色和用户" class="headerlink" title="创建HR管理人员的角色和用户"></a>创建HR管理人员的角色和用户</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建角色</span></span><br><span class="line"><span class="keyword">CREATE</span> ROLE role_hr_manager <span class="keyword">with</span> password &quot;tang@123&quot;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 赋予权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">DELETE</span> <span class="keyword">ON</span> <span class="keyword">ALL</span> TABLES <span class="keyword">IN</span> SCHEMA employees <span class="keyword">TO</span> role_hr_manager;</span><br><span class="line"><span class="keyword">GRANT</span> USAGE, <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">ALL</span> SEQUENCES <span class="keyword">IN</span> SCHEMA employees <span class="keyword">TO</span> role_hr_manager;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> hr_manager <span class="keyword">WITH</span> PASSWORD <span class="string">&#x27;tang@123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 赋予角色给用户</span></span><br><span class="line"><span class="keyword">GRANT</span> role_hr_manager <span class="keyword">TO</span> hr_manager;</span><br></pre></td></tr></table></figure>

<h3 id="步骤-2-测试权限"><a href="#步骤-2-测试权限" class="headerlink" title="步骤 2: 测试权限"></a>步骤 2: 测试权限</h3><p>测试这些用户是否能正确执行它们应有的权限，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 测试薪资管理人员</span></span><br><span class="line"><span class="comment">-- 使用 salary_manager1 登录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees.salary;</span><br><span class="line"><span class="keyword">UPDATE</span> employees.salary <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">100000</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">10001</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试部门管理人员</span></span><br><span class="line"><span class="comment">-- 使用 dept_manager 登录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees.department;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees.department (dept_name) <span class="keyword">VALUES</span> (<span class="string">&#x27;New Dept&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试HR管理人员</span></span><br><span class="line"><span class="comment">-- 使用 hr_manager 登录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees.employee;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> employees.employee <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">10010</span>;</span><br></pre></td></tr></table></figure>

<h3 id="步骤-3-验证和调整"><a href="#步骤-3-验证和调整" class="headerlink" title="步骤 3: 验证和调整"></a>步骤 3: 验证和调整</h3><p>确保每个角色的权限符合组织的安全政策和业务需求。通过日常操作中的反馈和审计日志来调整权限配置。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这样的权限设置可以确保数据库的操作按照预定的业务逻辑进行，同时也能有效地分离职责，增加数据的安全性。通过详细的角色和权限设计，可以使数据库的管理更为规范和高效。</p>
<h1 id="WireGuard"><a href="#WireGuard" class="headerlink" title="WireGuard"></a>WireGuard</h1><p>是一种VPN技术,可以直接通过具有公网ip的服务器,实现内网穿透</p>
<p><img src="https://s2.loli.net/2024/04/28/61WwY9qnCaJhNe5.png" alt="image-20240428155455529"></p>
<p>早知道早早学docker了</p>
<p>让这些设备相互认为处于同一个内网.</p>
<p>是不区分服务端和客户端的,而是直接:<img src="C:/Users/13205/AppData/Roaming/Typora/typora-user-images/image-20240428160322287.png" alt="image-20240428160322287"></p>
<p>直接使用腾讯云的:</p>
<p><img src="https://s2.loli.net/2024/04/28/um3Gjv5hsNPzU7Q.png" alt="image-20240428160607129"></p>
<p><img src="https://s2.loli.net/2024/04/28/6SqL2eMPkyQZJjA.png" alt="image-20240428160620805"></p>
<p>在防火墙中只打开了部分的端口:</p>
<p><img src="https://s2.loli.net/2024/04/28/kVJCz6eKajEUQhN.png" alt="image-20240428160720535"></p>
]]></content>
  </entry>
  <entry>
    <title>OrangePiShell学习</title>
    <url>/post/95f630e6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>别人写的shell脚本,做一个保存<br>在香橙派zero3上运行,用于快速部署一个省电无感的小透明轻服务器<br>使用方法<br>通过ssh 连接到zero3,举例<br>ssh <a href="mailto:&#111;&#114;&#97;&#110;&#103;&#101;&#112;&#x69;&#64;&#x31;&#57;&#50;&#x2e;&#49;&#x36;&#x38;&#46;&#x36;&#54;&#46;&#49;&#x30;&#54;">&#111;&#114;&#97;&#110;&#103;&#101;&#112;&#x69;&#64;&#x31;&#57;&#50;&#x2e;&#49;&#x36;&#x38;&#46;&#x36;&#54;&#46;&#49;&#x30;&#54;</a></p>
<p>默认用户名:orangepi<br>默认密码:orangepi<br>GitHub License</p>
<p>wget -O pi.sh <a href="https://mirror.ghproxy.com/https://raw.githubusercontent.com/wukongdaily/OrangePiShell/master/zero3/pi.sh">https://mirror.ghproxy.com/https://raw.githubusercontent.com/wukongdaily/OrangePiShell/master/zero3/pi.sh</a> &amp;&amp; chmod +x pi.sh<br>.&#x2F;pi.sh proxy</p>
<p>网盘<br>docker 离线包：<a href="https://wwl.lanzouq.com/s/zero3">https://wwl.lanzouq.com/s/zero3</a> 密码:3c60<br>免费内网穿透工具:<a href="https://i.cpolar.com/m/5Ij6">https://i.cpolar.com/m/5Ij6</a><br>docker全部离线包：<a href="https://drive.google.com/drive/folders/1lN14zlHeLu0zckHNftpW8kPlqGZHolL8?usp=sharing">https://drive.google.com/drive/folders/1lN14zlHeLu0zckHNftpW8kPlqGZHolL8?usp=sharing</a><br>zero3开发版 Ubuntu Server(需要解压后再写入TF卡):<a href="https://pan.baidu.com/s/1EKlmccM6STFDb_01rv-qQQ?pwd=2gc7">https://pan.baidu.com/s/1EKlmccM6STFDb_01rv-qQQ?pwd=2gc7</a><br>TF卡写盘工具：<a href="https://etcher.balena.io/">https://etcher.balena.io/</a><br>教学视频：<a href="https://www.bilibili.com/video/BV1ND421T7nB/">https://www.bilibili.com/video/BV1ND421T7nB/</a><br>教学视频2:<a href="https://youtu.be/Ym4d7uCo9eg">https://youtu.be/Ym4d7uCo9eg</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义颜色输出函数</span></span><br><span class="line">red() &#123; echo -e &quot;\033[31m\033[01m[WARNING] $1\033[0m&quot;; &#125;</span><br><span class="line">green() &#123; echo -e &quot;\033[32m\033[01m[INFO] $1\033[0m&quot;; &#125;</span><br><span class="line">greenline() &#123; echo -e &quot;\033[32m\033[01m $1\033[0m&quot;; &#125;</span><br><span class="line">yellow() &#123; echo -e &quot;\033[33m\033[01m[NOTICE] $1\033[0m&quot;; &#125;</span><br><span class="line">blue() &#123; echo -e &quot;\033[34m\033[01m[MESSAGE] $1\033[0m&quot;; &#125;</span><br><span class="line">light_magenta() &#123; echo -e &quot;\033[95m\033[01m[NOTICE] $1\033[0m&quot;; &#125;</span><br><span class="line">highlight() &#123; echo -e &quot;\033[32m\033[01m$1\033[0m&quot;; &#125;</span><br><span class="line">cyan() &#123; echo -e &quot;\033[38;2;0;255;255m$1\033[0m&quot;; &#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否以 root 用户身份运行</span></span><br><span class="line">if [ &quot;$(id -u)&quot; -ne 0 ]; then</span><br><span class="line">    echo &quot;此脚本需要以 root 用户权限运行，请输入当前用户的密码：&quot;</span><br><span class="line">    green &quot;注意！输入密码过程不显示*号属于正常现象&quot;</span><br><span class="line">    sudo &quot;$0&quot; &quot;$@&quot; # 重新以 root 权限运行此脚本</span><br><span class="line">    exit $?</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">proxy=&quot;&quot;</span><br><span class="line">if [ $# -gt 0 ]; then</span><br><span class="line">    proxy=&quot;https://mirror.ghproxy.com/&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">declare -a menu_options</span><br><span class="line">declare -A commands</span><br><span class="line">menu_options=(</span><br><span class="line">    &quot;更新系统软件包&quot;</span><br><span class="line">    &quot;安装并启动文件管理器FileBrowser&quot;</span><br><span class="line">    &quot;启动文件管理器FileBrowser&quot;</span><br><span class="line">    &quot;安装1panel面板管理工具&quot;</span><br><span class="line">    &quot;查看1panel用户信息&quot;</span><br><span class="line">    &quot;安装小雅和小雅keeper&quot;</span><br><span class="line">    &quot;修改阿里云盘Token(32位)&quot;</span><br><span class="line">    &quot;修改阿里云盘OpenToken(335位)&quot;</span><br><span class="line">    &quot;修改小雅转存文件夹ID(40位)&quot;</span><br><span class="line">    &quot;安装内网穿透工具Cpolar&quot;</span><br><span class="line">    &quot;安装盒子助手docker版&quot;</span><br><span class="line">    &quot;安装CasaOS面板&quot;</span><br><span class="line">    &quot;更新脚本&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">commands=(</span><br><span class="line">    [&quot;更新系统软件包&quot;]=&quot;update_system_packages&quot;</span><br><span class="line">    [&quot;安装并启动文件管理器FileBrowser&quot;]=&quot;install_filemanager&quot;</span><br><span class="line">    [&quot;启动文件管理器FileBrowser&quot;]=&quot;start_filemanager&quot;</span><br><span class="line">    [&quot;安装1panel面板管理工具&quot;]=&quot;install_1panel_on_linux&quot;</span><br><span class="line">    [&quot;查看1panel用户信息&quot;]=&quot;read_user_info&quot;</span><br><span class="line">    [&quot;安装小雅和小雅keeper&quot;]=&quot;install_xiaoya_alist&quot;</span><br><span class="line">    [&quot;修改阿里云盘Token(32位)&quot;]=&quot;update_aliyunpan_token&quot;</span><br><span class="line">    [&quot;修改阿里云盘OpenToken(335位)&quot;]=&quot;update_aliyunpan_opentoken&quot;</span><br><span class="line">    [&quot;修改小雅转存文件夹ID(40位)&quot;]=&quot;update_aliyunpan_folder_id&quot;</span><br><span class="line">    [&quot;安装内网穿透工具Cpolar&quot;]=&quot;install_cpolar&quot;</span><br><span class="line">    [&quot;安装盒子助手docker版&quot;]=&quot;install_wukongdaily_box&quot;</span><br><span class="line">    [&quot;安装CasaOS面板&quot;]=&quot;install_casaos&quot;</span><br><span class="line">    [&quot;更新脚本&quot;]=&quot;update_scripts&quot;</span><br><span class="line">)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新系统软件包</span></span><br><span class="line">update_system_packages() &#123;</span><br><span class="line">    green &quot;Setting timezone Asia/Shanghai...&quot;</span><br><span class="line">    sudo timedatectl set-timezone Asia/Shanghai</span><br><span class="line">    # 更新系统软件包</span><br><span class="line">    green &quot;Updating system packages...&quot;</span><br><span class="line">    sudo apt update</span><br><span class="line">    sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -y</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装文件管理器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">源自 https://filebrowser.org/installation</span></span><br><span class="line">install_filemanager()</span><br><span class="line">&#123;</span><br><span class="line">	trap &#x27;echo -e &quot;Aborted, error $? in command: $BASH_COMMAND&quot;; trap ERR; return 1&#x27; ERR</span><br><span class="line">	filemanager_os=&quot;unsupported&quot;</span><br><span class="line">	filemanager_arch=&quot;unknown&quot;</span><br><span class="line">	install_path=&quot;/usr/local/bin&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Termux on Android has <span class="variable">$PREFIX</span> <span class="built_in">set</span> <span class="built_in">which</span> already ends with /usr</span></span><br><span class="line">	if [[ -n &quot;$ANDROID_ROOT&quot; &amp;&amp; -n &quot;$PREFIX&quot; ]]; then</span><br><span class="line">		install_path=&quot;$PREFIX/bin&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Fall back to /usr/bin <span class="keyword">if</span> necessary</span></span><br><span class="line">	if [[ ! -d $install_path ]]; then</span><br><span class="line">		install_path=&quot;/usr/bin&quot;</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Not every platform has or needs sudo (https://termux.com/linux.html)</span></span><br><span class="line">	((EUID)) &amp;&amp; [[ -z &quot;$ANDROID_ROOT&quot; ]] &amp;&amp; sudo_cmd=&quot;sudo&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="comment">########################</span></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Which OS and version? <span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="comment">########################</span></span></span><br><span class="line"></span><br><span class="line">	filemanager_bin=&quot;filebrowser&quot;</span><br><span class="line">	filemanager_dl_ext=&quot;.tar.gz&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">NOTE: `<span class="built_in">uname</span> -m` is more accurate and universal than `<span class="built_in">arch</span>`</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">See https://en.wikipedia.org/wiki/Uname</span></span><br><span class="line">	unamem=&quot;$(uname -m)&quot;</span><br><span class="line">	case $unamem in</span><br><span class="line">	*aarch64*)</span><br><span class="line">		filemanager_arch=&quot;arm64&quot;;;</span><br><span class="line">	*64*)</span><br><span class="line">		filemanager_arch=&quot;amd64&quot;;;</span><br><span class="line">	*86*)</span><br><span class="line">		filemanager_arch=&quot;386&quot;;;</span><br><span class="line">	*armv5*)</span><br><span class="line">		filemanager_arch=&quot;armv5&quot;;;</span><br><span class="line">	*armv6*)</span><br><span class="line">		filemanager_arch=&quot;armv6&quot;;;</span><br><span class="line">	*armv7*)</span><br><span class="line">		filemanager_arch=&quot;armv7&quot;;;</span><br><span class="line">	*)</span><br><span class="line">		green &quot;Aborted, unsupported or unknown architecture: $unamem&quot;</span><br><span class="line">		return 2</span><br><span class="line">		;;</span><br><span class="line">	esac</span><br><span class="line"></span><br><span class="line">	unameu=&quot;$(tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27; &lt;&lt;&lt;$(uname))&quot;</span><br><span class="line">	if [[ $unameu == *DARWIN* ]]; then</span><br><span class="line">		filemanager_os=&quot;darwin&quot;</span><br><span class="line">	elif [[ $unameu == *LINUX* ]]; then</span><br><span class="line">		filemanager_os=&quot;linux&quot;</span><br><span class="line">	elif [[ $unameu == *FREEBSD* ]]; then</span><br><span class="line">		filemanager_os=&quot;freebsd&quot;</span><br><span class="line">	elif [[ $unameu == *NETBSD* ]]; then</span><br><span class="line">		filemanager_os=&quot;netbsd&quot;</span><br><span class="line">	elif [[ $unameu == *OPENBSD* ]]; then</span><br><span class="line">		filemanager_os=&quot;openbsd&quot;</span><br><span class="line">	elif [[ $unameu == *WIN* || $unameu == MSYS* ]]; then</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">Should catch cygwin</span></span><br><span class="line">		sudo_cmd=&quot;&quot;</span><br><span class="line">		filemanager_os=&quot;windows&quot;</span><br><span class="line">		filemanager_bin=&quot;filebrowser.exe&quot;</span><br><span class="line">		filemanager_dl_ext=&quot;.zip&quot;</span><br><span class="line">	else</span><br><span class="line">		green &quot;Aborted, unsupported or unknown OS: $uname&quot;</span><br><span class="line">		return 6</span><br><span class="line">	fi</span><br><span class="line">	green &quot;Downloading File Browser for $filemanager_os/$filemanager_arch...&quot;</span><br><span class="line">	if type -p curl &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">		net_getter=&quot;curl -fsSL&quot;</span><br><span class="line">	elif type -p wget &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">		net_getter=&quot;wget -qO-&quot;</span><br><span class="line">	else</span><br><span class="line">		green &quot;Aborted, could not find curl or wget&quot;</span><br><span class="line">		return 7</span><br><span class="line">	fi</span><br><span class="line">	filemanager_file=&quot;$&#123;filemanager_os&#125;-$filemanager_arch-filebrowser$filemanager_dl_ext&quot;</span><br><span class="line">    filemanager_url=&quot;$&#123;proxy&#125;https://github.com/filebrowser/filebrowser/releases/download/v2.28.0/$filemanager_file&quot;</span><br><span class="line">	echo &quot;$filemanager_url&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">Use <span class="variable">$PREFIX</span> <span class="keyword">for</span> compatibility with Termux on Android</span></span><br><span class="line">	rm -rf &quot;$PREFIX/tmp/$filemanager_file&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">&#123;net_getter&#125; <span class="string">&quot;<span class="variable">$filemanager_url</span>&quot;</span> &gt; <span class="string">&quot;<span class="variable">$PREFIX</span>/tmp/<span class="variable">$filemanager_file</span>&quot;</span></span></span><br><span class="line"></span><br><span class="line">	green &quot;Extracting...&quot;</span><br><span class="line">	case &quot;$filemanager_file&quot; in</span><br><span class="line">		*.zip)    unzip -o &quot;$PREFIX/tmp/$filemanager_file&quot; &quot;$filemanager_bin&quot; -d &quot;$PREFIX/tmp/&quot; ;;</span><br><span class="line">		*.tar.gz) tar -xzf &quot;$PREFIX/tmp/$filemanager_file&quot; -C &quot;$PREFIX/tmp/&quot; &quot;$filemanager_bin&quot; ;;</span><br><span class="line">	esac</span><br><span class="line">	chmod +x &quot;$PREFIX/tmp/$filemanager_bin&quot;</span><br><span class="line"></span><br><span class="line">	green &quot;Putting filemanager in $install_path (may require password)&quot;</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">sudo_cmd <span class="built_in">mv</span> <span class="string">&quot;<span class="variable">$PREFIX</span>/tmp/<span class="variable">$filemanager_bin</span>&quot;</span> <span class="string">&quot;<span class="variable">$install_path</span>/<span class="variable">$filemanager_bin</span>&quot;</span></span></span><br><span class="line">	if setcap_cmd=$(PATH+=$PATH:/sbin type -p setcap); then</span><br><span class="line"><span class="meta prompt_">		$</span><span class="language-bash">sudo_cmd <span class="variable">$setcap_cmd</span> cap_net_bind_service=+ep <span class="string">&quot;<span class="variable">$install_path</span>/<span class="variable">$filemanager_bin</span>&quot;</span></span></span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">sudo_cmd <span class="built_in">rm</span> -- <span class="string">&quot;<span class="variable">$PREFIX</span>/tmp/<span class="variable">$filemanager_file</span>&quot;</span></span></span><br><span class="line"></span><br><span class="line">	if type -p $filemanager_bin &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">		green &quot;Successfully installed&quot;</span><br><span class="line">		trap ERR</span><br><span class="line">		return 0</span><br><span class="line">	else</span><br><span class="line">		red &quot;Something went wrong, File Browser is not in your path&quot;</span><br><span class="line">		trap ERR</span><br><span class="line">		return 1</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动文件管理器</span></span><br><span class="line">start_filemanager() &#123;</span><br><span class="line">    # 检查是否已经安装 filebrowser</span><br><span class="line">    if ! command -v filebrowser &amp;&gt;/dev/null; then</span><br><span class="line">        red &quot;Error: filebrowser 未安装，请先安装 filebrowser&quot;</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 启动 filebrowser 文件管理器</span><br><span class="line">    echo &quot;启动 filebrowser 文件管理器...&quot;</span><br><span class="line"></span><br><span class="line">    # 使用 nohup 和输出重定向，记录启动日志到 filebrowser.log 文件中</span><br><span class="line">    nohup sudo filebrowser -r / --address 0.0.0.0 --port 8080 &gt;filebrowser.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">    # 检查 filebrowser 是否成功启动</span><br><span class="line">    if [ $? -ne 0 ]; then</span><br><span class="line">        red &quot;Error: 启动 filebrowser 文件管理器失败&quot;</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line">    local host_ip</span><br><span class="line">    host_ip=$(hostname -I | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">    echo &quot;filebrowser 文件管理器已启动，可以通过 http://$&#123;host_ip&#125;:8080 访问&quot;</span><br><span class="line">    echo &quot;登录用户名：admin&quot;</span><br><span class="line">    echo &quot;默认密码：admin（请尽快修改密码）&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装1panel面板</span></span><br><span class="line">install_1panel_on_linux() &#123;</span><br><span class="line">    curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sudo bash quick_start.sh</span><br><span class="line">    intro=&quot;https://1panel.cn/docs/installation/cli/&quot;</span><br><span class="line">    if command -v 1pctl &amp;&gt;/dev/null; then</span><br><span class="line">        green &quot;如何卸载1panel 请参考：$intro&quot;</span><br><span class="line">    else</span><br><span class="line">        red &quot;未安装1panel&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看1panel用户信息</span></span><br><span class="line">read_user_info()&#123;</span><br><span class="line">    sudo 1pctl user-info</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装小雅和小雅keeper</span></span><br><span class="line">install_xiaoya_alist() &#123;</span><br><span class="line">    local host_ip</span><br><span class="line">    host_ip=$(hostname -I | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">    if ! docker ps | grep -q &quot;xhofe/alist&quot;; then</span><br><span class="line">        red &quot;检测到没有安装小雅必备依赖 AList&quot;</span><br><span class="line">        green &quot;正在安装alist 请稍后&quot;</span><br><span class="line">        docker run -d --restart=unless-stopped -v /etc/alist:/opt/alist/data -p 5244:5244 -e PUID=0 -e PGID=0 -e UMASK=022 --name=&quot;alist&quot; xhofe/alist:latest</span><br><span class="line">        sleep 3</span><br><span class="line">        docker exec -it alist ./alist admin set admin</span><br><span class="line">        echo &#x27;</span><br><span class="line">    AList已安装,现在你可以安装小雅了</span><br><span class="line">    用户: admin </span><br><span class="line">    密码: admin</span><br><span class="line">    &#x27;</span><br><span class="line">        green 浏览器访问:http://$&#123;host_ip&#125;:5244</span><br><span class="line">    else</span><br><span class="line"></span><br><span class="line">        rm -rf /etc/xiaoya/mytoken.txt &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        rm -rf /etc/xiaoya/myopentoken.txt &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        rm -rf /etc/xiaoya/temp_transfer_folder_id.txt &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        cyan &#x27;</span><br><span class="line">        根据如下三个网址的提示完成token的填写</span><br><span class="line">        阿里云盘Token(32位):        https://alist.nn.ci/zh/guide/drivers/aliyundrive.html</span><br><span class="line">        阿里云盘OpenToken(335位):   https://alist.nn.ci/tool/aliyundrive/request.html</span><br><span class="line">        阿里云盘转存目录folder id:   https://www.aliyundrive.com/s/rP9gP3h9asE</span><br><span class="line">        &#x27;</span><br><span class="line">        </span><br><span class="line">        # 调用修改后的脚本</span><br><span class="line">        remove_docker_rmi &quot;http://docker.xiaoya.pro/update_new.sh&quot;</span><br><span class="line">        # 检查xiaoyaliu/alist 是否运行，如果运行了 则提示下面的信息，否则退出</span><br><span class="line">        if ! docker ps | grep -q &quot;xiaoyaliu/alist&quot;; then</span><br><span class="line">            echo &quot;Error: xiaoyaliu/alist Docker 容器未运行&quot;</span><br><span class="line">            return 1</span><br><span class="line">        fi</span><br><span class="line">        green &quot;正在安装小雅转存清理工具...&quot;</span><br><span class="line">        bash -c &quot;$(curl -sLk https://xiaoyahelper.ddsrem.com/aliyun_clear.sh | tail -n +2)&quot; -s 5</span><br><span class="line">        echo &#x27;</span><br><span class="line">    小雅docker已启动</span><br><span class="line">    webdav 信息如下</span><br><span class="line">    用户: guest </span><br><span class="line">    密码: guest_Api789</span><br><span class="line">    &#x27;</span><br><span class="line">        green 请您耐心等待xiaoya数据库更新完毕,5分钟后再访问</span><br><span class="line">        green 浏览器访问:http://$&#123;host_ip&#125;:5678</span><br><span class="line">        green &quot;已设置实时清理，只要产生了播放缓存一分钟内立即清理转存文件夹里的文件.&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">防止小雅重复下载镜像</span></span><br><span class="line">remove_docker_rmi() &#123;</span><br><span class="line">    local script_url=&quot;$1&quot;</span><br><span class="line">    # 下载脚本内容</span><br><span class="line">    local script_content=$(curl -sSL &quot;$script_url&quot;)</span><br><span class="line">    if [[ -z &quot;$script_content&quot; ]]; then</span><br><span class="line">        echo &quot;Failed to download script from: $script_url&quot;</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line">    # 移除所有含有 &quot;docker rmi&quot; 的行</span><br><span class="line">    local modified_content=$(echo &quot;$script_content&quot; | sed &#x27;/docker rmi/d&#x27;)</span><br><span class="line">    # 将修改后的内容保存到临时文件</span><br><span class="line">    local modified_script=&quot;/tmp/modified_script.sh&quot;</span><br><span class="line">    echo &quot;$modified_content&quot; &gt; &quot;$modified_script&quot;</span><br><span class="line">    # 使用 bash -c 执行修改后的脚本文件</span><br><span class="line">    bash -c &quot;bash $modified_script&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新阿里云盘Token</span></span><br><span class="line">update_aliyunpan_token()&#123;</span><br><span class="line">    local token_file=&quot;/etc/xiaoya/mytoken.txt&quot;</span><br><span class="line">    cyan &#x27;</span><br><span class="line">        根据如下网址的提示完成token的填写</span><br><span class="line">        阿里云盘Token(32位): https://alist.nn.ci/zh/guide/drivers/aliyundrive.html#%E5%88%B7%E6%96%B0%E4%BB%A4%E7%89%8C</span><br><span class="line">        </span><br><span class="line">        &#x27;</span><br><span class="line">    # 提示用户输入 token</span><br><span class="line">    read -p &quot;请输入一个 阿里云盘token(32位): &quot; token</span><br><span class="line"></span><br><span class="line">    if [[ -z &quot;$token&quot; ]]; then</span><br><span class="line">        echo &quot;输入的 token 为空，无法写入文件。&quot;</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 删除旧的 token 文件（如果存在）</span><br><span class="line">    if [[ -f &quot;$token_file&quot; ]]; then</span><br><span class="line">        sudo rm -rf &quot;$token_file&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 将 token 写入新的文件</span><br><span class="line">    sudo echo &quot;$token&quot; &gt; &quot;$token_file&quot;</span><br><span class="line">    green &quot;成功写入 token 到文件: $token_file&quot;</span><br><span class="line">    cat $token_file</span><br><span class="line">    red &quot;重启小雅docker容器之后 才会生效,请记得在1panel面板手动重启该容器&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新阿里云盘opentoken</span></span><br><span class="line">update_aliyunpan_opentoken()&#123;</span><br><span class="line">  local token_file=&quot;/etc/xiaoya/myopentoken.txt&quot;</span><br><span class="line">    cyan &#x27;</span><br><span class="line">        根据如下网址的提示完成opentoken的填写</span><br><span class="line">        阿里云盘OpenToken(335位): https://alist.nn.ci/tool/aliyundrive/request.html</span><br><span class="line">        &#x27;</span><br><span class="line">    # 提示用户输入 token</span><br><span class="line">    read -p &quot;请输入一个 阿里云盘OpenToken(335位): &quot; token</span><br><span class="line"></span><br><span class="line">    if [[ -z &quot;$token&quot; ]]; then</span><br><span class="line">        echo &quot;输入的 token 为空，无法写入文件。&quot;</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 删除旧的 token 文件（如果存在）</span><br><span class="line">    if [[ -f &quot;$token_file&quot; ]]; then</span><br><span class="line">        sudo rm -rf &quot;$token_file&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 将 token 写入新的文件</span><br><span class="line">    sudo echo &quot;$token&quot; &gt; &quot;$token_file&quot;</span><br><span class="line">    green &quot;成功写入 OpenToken 到文件: $token_file&quot;</span><br><span class="line">    cat $token_file</span><br><span class="line">    red &quot;重启小雅docker容器之后 才会生效,请记得在1panel面板手动重启该容器&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新小雅转存文件夹<span class="built_in">id</span></span></span><br><span class="line">update_aliyunpan_folder_id()&#123;</span><br><span class="line"> local token_file=&quot;/etc/xiaoya/temp_transfer_folder_id.txt&quot;</span><br><span class="line">    cyan &#x27;</span><br><span class="line">        根据如下网址的提示完成小雅转存文件夹ID的填写</span><br><span class="line">        阿里云盘小雅转存文件夹ID(40位): https://www.aliyundrive.com/s/rP9gP3h9asE</span><br><span class="line">        注意,首次使用 应该先转存该目录到自己的资源盘中</span><br><span class="line">        然后在自己的资源盘找到该转存目录的id</span><br><span class="line">        不要填写别人的文件夹id哦</span><br><span class="line">        &#x27;</span><br><span class="line">    # 提示用户输入 token</span><br><span class="line">    read -p &quot;请输入一个 阿里云盘小雅转存文件夹ID(40位): &quot; token</span><br><span class="line"></span><br><span class="line">    if [[ -z &quot;$token&quot; ]]; then</span><br><span class="line">        echo &quot;输入的 id 为空，无法写入文件。&quot;</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 删除旧的 token 文件（如果存在）</span><br><span class="line">    if [[ -f &quot;$token_file&quot; ]]; then</span><br><span class="line">        sudo rm -rf &quot;$token_file&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 将 token 写入新的文件</span><br><span class="line">    sudo echo &quot;$token&quot; &gt; &quot;$token_file&quot;</span><br><span class="line">    green &quot;成功写入 转存文件夹ID 到文件: $token_file&quot;</span><br><span class="line">    cat $token_file</span><br><span class="line">    red &quot;重启小雅docker容器之后 才会生效,请记得在1panel面板手动重启该容器&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装内网穿透</span></span><br><span class="line">install_cpolar() &#123;</span><br><span class="line">    local host_ip</span><br><span class="line">    host_ip=$(hostname -I | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">    curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash</span><br><span class="line">    if command -v cpolar &amp;&gt;/dev/null; then</span><br><span class="line">        # 提示用户输入 token</span><br><span class="line">        green &quot;访问 https://dashboard.cpolar.com/auth  复制您自己的AuthToken&quot;</span><br><span class="line">        read -p &quot;请输入您的 AuthToken: &quot; token</span><br><span class="line">        # 执行 cpolar 命令并传入 token</span><br><span class="line">        cpolar authtoken &quot;$token&quot;</span><br><span class="line">        # 向系统添加服务</span><br><span class="line">        green &quot;正在向系统添加cpolar服务&quot;</span><br><span class="line">        sudo systemctl enable cpolar</span><br><span class="line">        # 启动服务</span><br><span class="line">        green &quot;正在启动cpolar服务&quot;</span><br><span class="line">        sudo systemctl start cpolar</span><br><span class="line">        # 查看状态</span><br><span class="line">        green &quot;cpolar服务状态如下&quot;</span><br><span class="line">        sudo systemctl status cpolar | tee /dev/tty</span><br><span class="line">        green 浏览器访问:http://$&#123;host_ip&#125;:9200/#/tunnels/list  创建隧道</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    else</span><br><span class="line">        red &quot;错误：cpolar 命令未找到，请先安装 cpolar。&quot;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装盒子助手docker版</span></span><br><span class="line">install_wukongdaily_box() &#123;</span><br><span class="line">    sudo mkdir -p /mnt/tvhelper_data</span><br><span class="line">    sudo chmod 777 /mnt/tvhelper_data</span><br><span class="line">    docker run -d \</span><br><span class="line">        --restart unless-stopped \</span><br><span class="line">        --name tvhelper \</span><br><span class="line">        -p 2299:22 \</span><br><span class="line">        -p 2288:80 \</span><br><span class="line">        -v &quot;/mnt/tvhelper_data:/tvhelper/shells/data&quot; \</span><br><span class="line">        -e PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/android-sdk/platform-tools \</span><br><span class="line">        wukongdaily/box:latest</span><br><span class="line">    if ! docker ps | grep -q &quot;wukongdaily/box&quot;; then</span><br><span class="line">        echo &quot;Error: 盒子助手docker版 未运行成功&quot;</span><br><span class="line">    else</span><br><span class="line">        local host_ip</span><br><span class="line">        host_ip=$(hostname -I | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">        green &quot;盒子助手docker版已启动，可以通过 http://$&#123;host_ip&#125;:2288 验证是否安装成功&quot;</span><br><span class="line">        green &quot;还可以通过 ssh $&#123;host_ip&#125; -p 2299 连接到容器内 执行 ./tv.sh 使用该工具&quot;</span><br><span class="line">        green &quot;文档和教学视频：https://www.youtube.com/watch?v=xAk-3TxeXxQ \n  https://www.bilibili.com/video/BV1Rm411o78P&quot;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装CasaOS</span></span><br><span class="line">install_casaos()&#123;</span><br><span class="line">    curl -fsSL https://get.casaos.io | sudo bash</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新自己</span></span><br><span class="line">update_scripts()&#123;</span><br><span class="line">    wget -O pi.sh $&#123;proxy&#125;https://raw.githubusercontent.com/wukongdaily/OrangePiShell/master/zero3/pi.sh &amp;&amp; chmod +x pi.sh</span><br><span class="line">	echo &quot;脚本已更新并保存在当前目录 pi.sh,现在将执行新脚本。&quot;</span><br><span class="line">	./pi.sh $&#123;proxy&#125;</span><br><span class="line">	exit 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show_menu() &#123;</span><br><span class="line">    clear</span><br><span class="line">    greenline &quot;————————————————————————————————————————————————————&quot;</span><br><span class="line">    echo &#x27;</span><br><span class="line">    ***********  DIY docker轻服务器  ***************</span><br><span class="line">    环境:orange pi zero 3 (Ubuntu/debian)</span><br><span class="line">    脚本作用:快速部署一个省电无感的小透明轻服务器</span><br><span class="line">            --- Made by wukong with YOU ---&#x27;</span><br><span class="line">    echo -e &quot;    https://github.com/wukongdaily/OrangePiShell&quot;</span><br><span class="line">    greenline &quot;————————————————————————————————————————————————————&quot;</span><br><span class="line">    echo &quot;请选择操作：&quot;</span><br><span class="line"></span><br><span class="line">    # 特殊处理的项数组</span><br><span class="line">    special_items=(&quot;&quot;)</span><br><span class="line">    for i in &quot;$&#123;!menu_options[@]&#125;&quot;; do</span><br><span class="line">        if [[ &quot; $&#123;special_items[*]&#125; &quot; =~ &quot; $&#123;menu_options[i]&#125; &quot; ]]; then</span><br><span class="line">            # 如果当前项在特殊处理项数组中，使用特殊颜色</span><br><span class="line">            highlight &quot;$((i + 1)). $&#123;menu_options[i]&#125;&quot;</span><br><span class="line">        else</span><br><span class="line">            # 否则，使用普通格式</span><br><span class="line">            echo &quot;$((i + 1)). $&#123;menu_options[i]&#125;&quot;</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handle_choice() &#123;</span><br><span class="line">    local choice=$1</span><br><span class="line">    # 检查输入是否为空</span><br><span class="line">    if [[ -z $choice ]]; then</span><br><span class="line">        echo -e &quot;$&#123;RED&#125;输入不能为空，请重新选择。$&#123;NC&#125;&quot;</span><br><span class="line">        return</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 检查输入是否为数字</span><br><span class="line">    if ! [[ $choice =~ ^[0-9]+$ ]]; then</span><br><span class="line">        echo -e &quot;$&#123;RED&#125;请输入有效数字!$&#123;NC&#125;&quot;</span><br><span class="line">        return</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 检查数字是否在有效范围内</span><br><span class="line">    if [[ $choice -lt 1 ]] || [[ $choice -gt $&#123;#menu_options[@]&#125; ]]; then</span><br><span class="line">        echo -e &quot;$&#123;RED&#125;选项超出范围!$&#123;NC&#125;&quot;</span><br><span class="line">        echo -e &quot;$&#123;YELLOW&#125;请输入 1 到 $&#123;#menu_options[@]&#125; 之间的数字。$&#123;NC&#125;&quot;</span><br><span class="line">        return</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 执行命令</span><br><span class="line">    if [ -z &quot;$&#123;commands[$&#123;menu_options[$choice - 1]&#125;]&#125;&quot; ]; then</span><br><span class="line">        echo -e &quot;$&#123;RED&#125;无效选项，请重新选择。$&#123;NC&#125;&quot;</span><br><span class="line">        return</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    &quot;$&#123;commands[$&#123;menu_options[$choice - 1]&#125;]&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while true; do</span><br><span class="line">    show_menu</span><br><span class="line">    read -p &quot;请输入选项的序号(输入q退出): &quot; choice</span><br><span class="line">    if [[ $choice == &#x27;q&#x27; ]]; then</span><br><span class="line">        break</span><br><span class="line">    fi</span><br><span class="line">    handle_choice $choice</span><br><span class="line">    echo &quot;按任意键继续...&quot;</span><br><span class="line">    read -n 1 # 等待用户按键</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>HEXO示例文件</title>
    <url>/post/4a17b156.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>链接校园网的JS脚本</title>
    <url>/post/566092e4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> fetch &#125; <span class="keyword">from</span> <span class="string">&quot;node-fetch&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> os <span class="keyword">from</span> <span class="string">&quot;os&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">URL</span> =</span><br><span class="line">	<span class="string">&quot;http://10.0.1.5:801/eportal/portal/login?callback=dr1003&amp;login_method=1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">My</span>_account = <span class="string">&quot;your_account&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">My</span>_password = <span class="string">&quot;your_password&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> address_last =</span><br><span class="line">	<span class="string">&quot;&amp;wlan_user_ipv6=&amp;wlan_user_mac=000000000000&amp;wlan_ac_ip=10.32.255.10&amp;wlan_ac_name=HJ-BRAS-ME60-01&amp;jsVersion=4.2&amp;terminal_type=1&amp;lang=zh-cn&amp;v=10063&amp;lang=zh&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">WifiConnect</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">const</span> networkInterfaces = os.<span class="title function_">networkInterfaces</span>();</span><br><span class="line">		<span class="keyword">const</span> ip = networkInterfaces[<span class="string">&quot;wlan0&quot;</span>][<span class="number">0</span>].<span class="property">address</span>; <span class="comment">// Assuming &#x27;wlan0&#x27; is the interface for your local IP</span></span><br><span class="line">		<span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">			<span class="variable constant_">URL</span> +</span><br><span class="line">				<span class="string">`&amp;user_account=,0,<span class="subst">$&#123;My_account&#125;</span>&amp;user_password=<span class="subst">$&#123;My_password&#125;</span>&amp;wlan_user_ip=<span class="subst">$&#123;ip&#125;</span><span class="subst">$&#123;address_last&#125;</span>`</span></span><br><span class="line">		);</span><br><span class="line">		<span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">text</span>();</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应数据:&quot;</span>);</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">		<span class="keyword">if</span> (data) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error:&quot;</span>, error);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;正在连接校园网&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请稍等...&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> flag = <span class="title class_">WifiConnect</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>具体教程:	<a href="https://blog.csdn.net/m0_74349077/article/details/136997319">链接校园网的JS脚本</a></p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录刷题日记</title>
    <url>/post/6bcb6b2a.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Typora的快捷操作"><a href="#Typora的快捷操作" class="headerlink" title="Typora的快捷操作"></a>Typora的快捷操作</h1><p>记录下Typora的批量上传图片操作:</p>
<p><img src="https://s2.loli.net/2024/05/22/bLJXQFe6cmsCZRn.png" alt="image-20240522130957547"></p>
<h1 id="刷题日记"><a href="#刷题日记" class="headerlink" title="刷题日记"></a>刷题日记</h1><h2 id="特殊日期"><a href="#特殊日期" class="headerlink" title="特殊日期"></a>特殊日期</h2><p><a href="https://www.lanqiao.cn/problems/2408/learning/?page=1&first_category_id=1&second_category_id=3&tags=2023&difficulty=20">1.特殊日期 - 蓝桥云课 (lanqiao.cn)</a></p>
<p>求解每个数位的和：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(n)&#123;</span><br><span class="line">    sum+=n%<span class="number">10</span>;</span><br><span class="line">    n/=<span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2022</span> = <span class="number">2</span>+<span class="number">0</span>+<span class="number">2</span>+<span class="number">2</span> sum=<span class="number">6</span></span><br><span class="line">每个数位是老考点了.</span><br></pre></td></tr></table></figure>

<p>判断闰年:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span> || year%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line">      day[<span class="number">2</span>]=<span class="number">29</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      day[<span class="number">2</span>]=<span class="number">28</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>方便求解日期:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i,j,count,year,month,day[<span class="number">13</span>] = &#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>这里面的:蓝桥杯真题:好数,判断每个奇数位上是奇数,偶数wei是偶数,就需要判断数位.</p>
<p>需要一个数组存储每个数位.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line"> <span class="keyword">while</span>(n)&#123;</span><br><span class="line">   a.<span class="built_in">push_back</span>(n%<span class="number">10</span>);</span><br><span class="line">   n/=<span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="只要把每个做过的题目吸收了-就真的nb"><a href="#只要把每个做过的题目吸收了-就真的nb" class="headerlink" title="只要把每个做过的题目吸收了,就真的nb"></a>只要把每个做过的题目吸收了,就真的nb</h2><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="GCD和LCM"><a href="#GCD和LCM" class="headerlink" title="GCD和LCM"></a>GCD和LCM</h2><p><img src="https://s2.loli.net/2024/04/16/jZE2UJTbLX3SKhs.png" alt="image-20240416201114071"></p>
<p>互质判断:</p>
<p><img src="https://s2.loli.net/2024/04/16/qWQKME7nJOtf3hk.png" alt="image-20240416201246443"></p>
<p><img src="https://s2.loli.net/2024/04/16/JKW6M9uSUTbVict.png" alt="image-20240416213756996"></p>
<p>得出:gcd(a,b) &#x3D; gcd(a%b,b);</p>
<p>不断重复这个递归过程,复杂度为log2n</p>
<p>现在的人都是直接追求结果</p>
<p>我也是,直接背下来算了</p>
<p><img src="https://s2.loli.net/2024/04/16/HOgDj4UELBzurXJ.png" alt="image-20240416215013603"></p>
<p><img src="https://s2.loli.net/2024/04/16/uBMZCKeUxEJHy7L.png" alt="image-20240416215527632"></p>
<p>举个例子即可,在质因子中找到指数最小的,然后相乘,得gcd.</p>
<h3 id="宝石组合"><a href="#宝石组合" class="headerlink" title="宝石组合"></a>宝石组合</h3><p><a href="https://dashoj.com/d/lqbproblem/p/199">题目详情 - 宝石组合（编程题） - DashOJ</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">我是傻逼,有个电脑的事情,我非得整个平板\.</span><br></pre></td></tr></table></figure>

<h1 id="快速幂-乘法逆元"><a href="#快速幂-乘法逆元" class="headerlink" title="快速幂;乘法逆元"></a>快速幂;乘法逆元</h1><h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><p>动图讲解单调栈:<a href="https://leetcode.cn/problems/next-greater-element-ii/solutions/1/dong-hua-jiang-jie-dan-diao-zhan-by-fuxu-4z2g/">503. 下一个更大元素 II - 力扣（LeetCode）</a></p>
<p><a href="https://leetcode.cn/problems/daily-temperatures/description/">739. 每日温度 - 力扣（LeetCode）</a></p>
<p>直接看视频</p>
<p><a href="https://www.bilibili.com/video/BV15y4y1o7Dw/?p=137&spm_id_from=pageDriver">单调栈，成环了可怎么办？LeetCode：503.下一个更大元素II_哔哩哔哩_bilibili</a></p>
<p>帮你找到这个元素,右边比他大或者小的元素 </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dailyTemperatures</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; temperatures)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(temperatures.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stack;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; temperatures.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> curTemp = temperatures[i];</span><br><span class="line">            <span class="keyword">while</span> (!stack.<span class="built_in">empty</span>() &amp;&amp; curTemp &gt; temperatures[stack.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                <span class="type">int</span> prevIndex = stack.<span class="built_in">top</span>();</span><br><span class="line">                stack.<span class="built_in">pop</span>();</span><br><span class="line">                ans[prevIndex] = i - prevIndex;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>直接类似于默写模板了其实,嘻嘻</p>
<p>这是力扣的每日温度!</p>
<h2 id="496-下一个最大元素I"><a href="#496-下一个最大元素I" class="headerlink" title="496.下一个最大元素I"></a><a href="https://leetcode.cn/problems/next-greater-element-i/">496.下一个最大元素I</a></h2><p><img src="https://s2.loli.net/2024/04/30/NQPDl7H1gG4ibJp.png" alt="image-20240430184135620"></p>
<p>c++代码解决,</p>
<h2 id="503-下一个更大元素-II-力扣（LeetCode）"><a href="#503-下一个更大元素-II-力扣（LeetCode）" class="headerlink" title="503. 下一个更大元素 II - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/next-greater-element-ii/">503. 下一个更大元素 II - 力扣（LeetCode）</a></h2><p>这个主要是数组是循环的:</p>
<p><strong>1.一种实现方式是，把数组复制一份到数组末尾，这样虽然不是严格的循环数组，但是对于本题已经足够了，因为本题对数组最多遍历两次。</strong></p>
<p>如何维护这个循环数组是问题:</p>
<p>只看不干,等于白干,会忘的.</p>
<p>模拟循环数组:</p>
<p>实现那个循环队列相同的思路:<strong>进行取模操作</strong>:<code>int idx = i%nums.size()</code></p>
<p>单调栈模板代码:</p>
<p><img src="https://s2.loli.net/2024/04/30/1sGVkQbPq2J5uT7.png" alt="image-20240430203155940"></p>
<p>解决这个问题的代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">			<span class="comment">//数组循环搜索,还是直接写题吧,不纠结语言了.先使用C++.其实差不多的,思想一样,代码的改写交给GPT即可.</span></span><br><span class="line">			<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(nums.size(), <span class="number">-1</span>)</span></span>;</span><br><span class="line">			stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() * <span class="number">2</span>; i++) &#123;</span><br><span class="line">				<span class="type">int</span> idx = i % nums.<span class="built_in">size</span>();</span><br><span class="line">				<span class="type">int</span> cur = nums[idx]; <span class="comment">//cur是元素,idx是下标</span></span><br><span class="line">				<span class="keyword">while</span> (!st.<span class="built_in">empty</span>() &amp;&amp; cur &gt; nums[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">					<span class="type">int</span> preIdx = st.<span class="built_in">top</span>();<span class="comment">//之前push到stack的元素,就是要找到他下一个最大元素的那个元素.</span></span><br><span class="line">					st.<span class="built_in">pop</span>();</span><br><span class="line">					ans[preIdx] = cur;</span><br><span class="line">				&#125;</span><br><span class="line">				st.<span class="built_in">push</span>(idx);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> ans;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>多看看力口的官方题解:<a href="https://leetcode.cn/problems/next-greater-element-ii/solutions/637573/xia-yi-ge-geng-da-yuan-su-ii-by-leetcode-bwam/">503. 下一个更大元素 II - 力扣（LeetCode）</a></p>
<p>写的还行</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; nums[stk.<span class="built_in">top</span>()] &lt; nums[i % n]) &#123;</span><br><span class="line">                ret[stk.<span class="built_in">top</span>()] = nums[i % n];</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            stk.<span class="built_in">push</span>(i % n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">作者：力扣官方题解</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/next-greater-element-ii/solutions/637573/xia-yi-ge-geng-da-yuan-su-ii-by-leetcode-bwam/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>

<h2 id="42-接雨水-力扣（LeetCode）"><a href="#42-接雨水-力扣（LeetCode）" class="headerlink" title="42. 接雨水 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/trapping-rain-water/solutions/692342/jie-yu-shui-by-leetcode-solution-tuvc/">42. 接雨水 - 力扣（LeetCode）</a></h2><p>暴力法解决</p>
<p>直接看代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">			<span class="type">int</span> len = height.<span class="built_in">size</span>();</span><br><span class="line">			<span class="keyword">if</span> (len &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxLeft</span><span class="params">(len, <span class="number">0</span>)</span></span>;</span><br><span class="line">			<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxRight</span><span class="params">(len, <span class="number">0</span>)</span></span>;</span><br><span class="line">			<span class="comment">//从左边开始找</span></span><br><span class="line">			maxLeft[<span class="number">0</span>] = height[<span class="number">0</span>];</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">				maxLeft[i] = <span class="built_in">max</span>(maxLeft[i - <span class="number">1</span>], height[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//从后往前遍历</span></span><br><span class="line">			maxRight[len - <span class="number">1</span>] = height[len - <span class="number">1</span>];</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">				maxRight[i] = <span class="built_in">max</span>(height[i], maxRight[i + <span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">            <span class="comment">//经典时间换空间</span></span><br><span class="line">			<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">				<span class="type">int</span> h = <span class="built_in">min</span>(maxLeft[i], maxRight[i]) - height[i]; <span class="comment">//左边柱子和右边柱子最高高度取最小值,然后减去当前的高度</span></span><br><span class="line">				<span class="keyword">if</span> (h &gt; <span class="number">0</span>) sum += h;<span class="comment">//h是雨水高度</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> sum;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><h2 id="55-跳跃游戏-力扣（LeetCode）"><a href="#55-跳跃游戏-力扣（LeetCode）" class="headerlink" title="55. 跳跃游戏 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/jump-game/">55. 跳跃游戏 - 力扣（LeetCode）</a></h2><p><img src="https://s2.loli.net/2024/05/06/rtjoNhwg2dU5sXL.png" alt="image-20240506113613759"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="type">bool</span> <span class="title">canJump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			<span class="type">int</span> cover = <span class="number">0</span>;</span><br><span class="line">			<span class="comment">// for (int i = 0; i &lt; nums.size(); i++) &#123;//这里的重点是,操作循环的变量是cover,这代表了,每次在自己的覆盖范围 里面循环</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= cover; i++) &#123;</span><br><span class="line">				cover = <span class="built_in">max</span>(i + nums[i], cover); <span class="comment">//我只要最大的覆盖范围</span></span><br><span class="line">				<span class="keyword">if</span> (cover &gt;= nums.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;<span class="comment">//只能恰好等于的时候</span></span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>最重要的一集:<strong>使用cover操作变量,代表在自己的覆盖范围内循环</strong></p>
<h2 id="406-根据身高重建队列-力扣（LeetCode）"><a href="#406-根据身高重建队列-力扣（LeetCode）" class="headerlink" title="406. 根据身高重建队列 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/queue-reconstruction-by-height/">406. 根据身高重建队列 - 力扣（LeetCode）</a></h2><p><img src="https://s2.loli.net/2024/05/09/gXQ9WM341jmznuf.png" alt="image-20240509185421846"></p>
<p>题解:<a href="https://www.programmercarl.com/0406.%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97.html#%E6%80%9D%E8%B7%AF">0406.根据身高重建队列.html#思路</a></p>
<p>代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;B)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (A[<span class="number">0</span>] == B[<span class="number">0</span>]) &#123;</span><br><span class="line">				<span class="keyword">return</span> A[<span class="number">1</span>] &lt; B[<span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> A[<span class="number">0</span>] &gt; B[<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">reconstructQueue</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; people) &#123;</span><br><span class="line">			list&lt;vector&lt;<span class="type">int</span>&gt;&gt; que;</span><br><span class="line">			<span class="built_in">sort</span>(people.<span class="built_in">begin</span>(), people.<span class="built_in">end</span>(), <span class="built_in">cmp</span>());</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; people.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">				<span class="comment">//理解还是得模拟代码执行,自己懂怎么搞,才能写出来实际有效的代码</span></span><br><span class="line">				<span class="type">int</span> pos = people[i][<span class="number">1</span>];</span><br><span class="line">				<span class="keyword">auto</span> it = que.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">				<span class="keyword">while</span> (pos--) &#123;</span><br><span class="line">					it++;</span><br><span class="line">				&#125;</span><br><span class="line">				que.<span class="built_in">insert</span>(it, people[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(que.<span class="built_in">begin</span>(), que.<span class="built_in">end</span>());</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>1.<code>static bool cmp(const vector&lt;int&gt; &amp;A, const vector&lt;int&gt; &amp;B)</code>前面记得带上<strong>static</strong></p>
<p>然后const和&amp;不要忘记了,定义比较的规则即可.是针对vector内部存储的元素定义的.</p>
<p><code>list&lt;vector&lt;int&gt;&gt; que;</code>链表实现,插入的时候时间复杂度比较小,相对于vector的插入来说,因为vector的插入是暴力扩展数组,导致时间复杂度十分的高啊.</p>
<p><img src="https://s2.loli.net/2024/05/09/8veTingA6f4kPE2.png" alt="image-20240509185924681"></p>
<p><img src="https://s2.loli.net/2024/05/09/gm9UVThQS2KBpD7.png" alt="vector原理"></p>
<p><img src="https://s2.loli.net/2024/05/09/pqJ5YIOMtfwakQo.png" alt="image-20240509185943770"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> it = que.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">				<span class="keyword">while</span> (pos--) &#123;</span><br><span class="line">					it++;</span><br><span class="line">				&#125;</span><br><span class="line">				que.<span class="built_in">insert</span>(it, people[i]);</span><br></pre></td></tr></table></figure>

<p>改成链表的格式,找到指向最开始的下标pos,然后直接原地插入:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(que.<span class="built_in">begin</span>(), que.<span class="built_in">end</span>());<span class="comment">//直接拷贝一份</span></span><br></pre></td></tr></table></figure>

<p>在提供的代码中，<code>return vector&lt;vector&lt;int&gt;&gt;(que.begin(), que.end());</code>这行代码的作用是将存储在链表 <code>que</code> 中的结果转换为一个二维向量，并将其作为函数的返回值。</p>
<p>解释这段代码的具体步骤如下：</p>
<ol>
<li><code>que.begin()</code> 返回指向链表 <code>que</code> 中第一个元素的迭代器。</li>
<li><code>que.end()</code> 返回指向链表 <code>que</code> 中末尾（最后一个元素的下一个位置）的迭代器。</li>
<li><code>vector&lt;vector&lt;int&gt;&gt;(que.begin(), que.end())</code> 这部分代码将链表 <code>que</code> 中的元素从开始到结束复制到一个新的二维向量中。</li>
</ol>
<p><strong>换句话说，这行代码的功能是将链表中的内容复制到一个新的二维向量中，并作为函数 <code>reconstructQueue</code> 的返回值。</strong></p>
<p>这样的操作是由于 <code>std::list</code> 不直接支持通过下标进行访问。通过将链表中的元素复制到向量中，可以更方便地对结果进行处理或输出。</p>
<p><strong>直接AI解释代码即可</strong></p>
<h2 id="435-无重叠区间-力扣（LeetCode）"><a href="#435-无重叠区间-力扣（LeetCode）" class="headerlink" title="435. 无重叠区间 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/non-overlapping-intervals/submissions/533691956/">435. 无重叠区间 - 力扣（LeetCode）</a></h2><p>题解:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; B)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> A[<span class="number">0</span>] &lt; B[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Add a check for empty intervals</span></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(),intervals.<span class="built_in">end</span>(),cmp);</span><br><span class="line">        <span class="type">int</span> end = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;intervals.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(end&lt;=intervals[i][<span class="number">0</span>])&#123;<span class="comment">//不重叠</span></span><br><span class="line">                end = intervals[i][<span class="number">1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//大于的情况才算</span></span><br><span class="line">                end=<span class="built_in">min</span>(end,intervals[i][<span class="number">1</span>]);<span class="comment">//更新的必须是右边界</span></span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>1.具体两点:</p>
<p><img src="https://s2.loli.net/2024/05/21/KfwrOcksy7qHM43.png" alt="img"></p>
<p>end是区间的右点,首先让全部区间按照左边界或者右边界排序.</p>
<p>2.然后:</p>
<p><code>end=min(end,intervals[i][1]);//更新的必须是右边界</code>这里的min是因为可能有<img src="https://s2.loli.net/2024/05/21/j6ZW5K2dIArfQu1.jpg" alt="591288c5b40a217d42979201a6621eb"></p>
<p>大区间是第一个,然后套了小区间(第二个),所以取最小的右边界,判断是否重叠.</p>
<p>逻辑是</p>
<p><code>if(end&lt;=intervals[i][0])&#123;//不重叠                 end = intervals[i][1];             &#125;else&#123;//大于的情况才算                 end=min(end,intervals[i][1]);//更新的必须是右边界                 ans++;             &#125;</code></p>
<p>end代表前一个的右点,然后和第二个的左点比较,右大于左即可判断重叠:</p>
<p><img src="https://s2.loli.net/2024/05/21/vXGMeKF4OYJtcyS.png" alt="452.用最少数量的箭引爆气球"></p>
<h2 id="763-划分字母区间-力扣（LeetCode）"><a href="#763-划分字母区间-力扣（LeetCode）" class="headerlink" title="763. 划分字母区间 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/partition-labels/">763. 划分字母区间 - 力扣（LeetCode）</a></h2><p>题解:</p>
<p><a href="https://www.programmercarl.com/0763.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4.html#%E6%80%9D%E8%B7%AF">代码随想录 (programmercarl.com)</a></p>
<p>图片:</p>
<p><img src="https://s2.loli.net/2024/05/22/grxtAObonG3vhI7.png" alt="763.划分字母区间"></p>
<h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><p><img src="https://s2.loli.net/2024/05/22/oruk5QSCLVObUcF.png" alt="image-20240306155549126"></p>
<p>KMP算法会在不匹配的时候,匹配到之前匹配过的字符串,这里最开始匹配,f和b匹配不上,就会去找之前的aab.</p>
<h4 id="前缀表"><a href="#前缀表" class="headerlink" title="前缀表"></a>前缀表</h4><p>能找到b的原因是:<strong>我的f前面的aa和b前面的aa是一样的,如此就需要找到String中max length的equal的前后缀子串,如此在遇到不匹配,就去查询,然后找到匹配的字符串.</strong></p>
<p> 前缀是:<img src="https://s2.loli.net/2024/05/22/ozw2UtKfjcyTd9I.png" alt="image-20240306160520097"></p>
<p>后缀是:<img src="https://s2.loli.net/2024/05/22/FXDiKRC7ML6BbYq.png" alt="image-20240306160503523"></p>
<h5 id="最长相等前后缀"><a href="#最长相等前后缀" class="headerlink" title="最长相等前后缀"></a>最长相等前后缀</h5><p>问题:不够专注.主要问题,想东想西,还是得规划.</p>
<p>还是得专注啊. </p>
<p><img src="https://s2.loli.net/2024/05/22/qrjmQXZC9zEtixU.png" alt="image-20240306212520455"></p>
<p>此处就是看aa,aa这种东西,在aabaa中,前缀是aa,后缀也是aa,那么相等的前后缀的长度即为2.</p>
<h1 id="蓝桥杯常见坑点"><a href="#蓝桥杯常见坑点" class="headerlink" title="蓝桥杯常见坑点"></a>蓝桥杯常见坑点</h1><p><img src="https://s2.loli.net/2024/05/22/HLnUyTNS5JmkYsX.webp" alt="img"></p>
<p><img src="https://s2.loli.net/2024/05/22/LCpgafyWGM8dO4l.webp" alt="img"></p>
<h1 id="常见STL容器学习"><a href="#常见STL容器学习" class="headerlink" title="常见STL容器学习"></a>常见STL容器学习</h1><p>算法基础模板:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 解题</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t; <span class="comment">// 单测则注释</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列:"></a>优先队列:</h2><p><img src="https://s2.loli.net/2024/05/22/ZJeYzcDj9tsSkam.png" alt="image-20240313144259672"></p>
<h3 id="定义比较条件"><a href="#定义比较条件" class="headerlink" title="定义比较条件"></a>定义比较条件</h3><p>当你使用自己定义的结构体时,<strong>需要重载小于号,或者重载一下运算符</strong></p>
<p><strong><img src="https://s2.loli.net/2024/05/22/utIEMywT1Y3kOmx.png" alt="image-20240313144519216"></strong></p>
<p>比如这里的node,不然不知道如何比较的.</p>
<h3 id="使用的例子"><a href="#使用的例子" class="headerlink" title="使用的例子:"></a>使用的例子:</h3><p><code>cmp函数</code></p>
<p><img src="https://s2.loli.net/2024/05/22/CoHTPGY4bM9Ny3z.png" alt="image-20240313145013176"></p>
<p>具体使用</p>
<p><img src="https://s2.loli.net/2024/05/22/xoMvpVzL2gYIycD.png" alt="image-20240313144944303"></p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作:"></a>基本操作:</h3><p><img src="https://s2.loli.net/2024/05/22/wCRjQWunpkF9Xla.png" alt="image-20240313144830270"></p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><a href="https://www.starrycoding.com/problem/58">小e的菜篮子 - StarryCoding | 踏出编程第一步</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// define priority_queue</span></span><br><span class="line">  priority_queue&lt;ll&gt; pq;</span><br><span class="line">  ll sum = <span class="number">0</span>;  <span class="comment">// the sum of the pq`s element;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> q;</span><br><span class="line">  cin &gt;&gt; q;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">    <span class="type">int</span> op;</span><br><span class="line">    cin &gt;&gt; op;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">      ll x;</span><br><span class="line">      cin &gt;&gt; x;</span><br><span class="line">      pq.<span class="built_in">push</span>(x);</span><br><span class="line">      sum += x;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        ll x = pq.<span class="built_in">top</span>();</span><br><span class="line">        sum -= x;</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a>MAP</h2><p><img src="https://s2.loli.net/2024/05/22/iUXDFJmQV2a6ToZ.png" alt="image-20240313152045424"></p>
<p>底层红黑树,就是object差不多的,键值对.</p>
<p>里面是<strong>一棵树</strong></p>
<p><img src="https://s2.loli.net/2024/05/22/FTf8tYenMBIZb9V.png" alt="image-20240313152130218"></p>
<h3 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h3><p><img src="https://s2.loli.net/2024/05/22/OIc3hlSUqYGT9Wy.png" alt="image-20240313152325006"></p>
<h3 id="基本的操作"><a href="#基本的操作" class="headerlink" title="基本的操作"></a>基本的操作</h3><p><img src="https://s2.loli.net/2024/05/22/cDiRxnwS7O1QyUs.png" alt="image-20240313152525176"></p>
<h3 id="遍历map和例题"><a href="#遍历map和例题" class="headerlink" title="遍历map和例题"></a>遍历map和例题</h3><p><img src="https://s2.loli.net/2024/05/22/GJFWhXfNl4UyLzK.png" alt="image-20240313152755574"></p>
<p>mysql密码:20040317@Li</p>
<p>例题:<a href="https://www.starrycoding.com/problem/59">气球数量 - StarryCoding | 踏出编程第一步</a></p>
<h3 id="P59-气球数量"><a href="#P59-气球数量" class="headerlink" title="[P59] 气球数量"></a>[P59] 气球数量</h3><p>收藏本题</p>
<p>提交记录</p>
<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>空中有�<em>n</em>个气球，第�<em>i</em>个气球有一个颜色����<em>co<strong>l</strong>i</em>（用一个字符串表示）。</p>
<p>请你求出每种气球的个数，按照气球出现的顺序进行排序输出。</p>
<h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>第一行一个整数�<em>T</em>表示样例个数。(1≤�≤10)(1≤<em>T</em>≤10)</p>
<p>对于每个样例，第一行一个整数�<em>n</em>表示气球个数。(1≤� ��100)(1≤<em>n</em> <em>l**e</em>100)</p>
<p>接下来�<em>n</em>行，每行一个字符串表示����<em>co<strong>l</strong>i</em>。(1≤∣����∣≤50)(1≤∣<em>co<strong>l</strong>i</em>∣≤50)</p>
<p>字符串仅包含小写英文字母。</p>
<h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>对于每个样例，输出所有气球的种类和个数。</p>
<h4 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">red</span><br><span class="line">red</span><br><span class="line">blue</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="selector-tag">a</span></span><br><span class="line"><span class="selector-tag">b</span></span><br><span class="line">e</span><br><span class="line">d</span><br><span class="line">e</span><br></pre></td></tr></table></figure>

<h4 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">red <span class="number">2</span></span><br><span class="line">blue <span class="number">1</span></span><br><span class="line"><span class="selector-tag">a</span> <span class="number">1</span></span><br><span class="line"><span class="selector-tag">b</span> <span class="number">1</span></span><br><span class="line">e <span class="number">2</span></span><br><span class="line">d <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>对字符串进行计数.但是map的key可以是字符串</p>
<p>解决代码:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  ll id;</span><br><span class="line">  ll num;</span><br><span class="line">  string col;</span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Node &amp;u) <span class="type">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> id &lt; u.id;</span><br><span class="line">  &#125;  <span class="comment">// 定义map中排序的规则</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  map&lt;string, Node&gt; mp;</span><br><span class="line">  ll n;  <span class="comment">// 气球个数</span></span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    string col;</span><br><span class="line">    cin &gt;&gt; col;</span><br><span class="line">    <span class="keyword">if</span> (mp.<span class="built_in">count</span>(col)) &#123;  <span class="comment">// 如果map中有这个颜色.</span></span><br><span class="line">      mp[col].num++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      mp[col] = &#123;i, <span class="number">1</span>, col&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 最后让我输出的是:颜色和对应的数量.</span></span><br><span class="line">  vector&lt;Node&gt; vr;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[key, val] : mp) &#123;</span><br><span class="line">    vr.<span class="built_in">push_back</span>(val);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sort</span>(vr.<span class="built_in">begin</span>(), vr.<span class="built_in">end</span>());</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[id, num, col] : vr) &#123;</span><br><span class="line">    cout &lt;&lt; col &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="type">int</span> T;</span><br><span class="line">  cin &gt;&gt; T;</span><br><span class="line">  <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>代码:<strong>当自定义结构体的时候,重载小于号运算符</strong>,Set就是数学意义上的集合:</p>
<ol>
<li>没有重复元素:</li>
<li>Set里面的元素是有顺序的.</li>
<li>Set是树形结构.</li>
</ol>
<p>代码例子:</p>
<p>具体应用:</p>
<p><img src="https://s2.loli.net/2024/05/22/nrDq4FISfYuzQP1.png" alt="image-20240313203202267"></p>
<p>错误示例:</p>
<p><img src="https://s2.loli.net/2024/05/22/udSbjt8CanNLkf7.png" alt="image-20240313203325151"></p>
<p>TLE和RE的解释:<img src="https://s2.loli.net/2024/05/22/u9aGtOBLMWAX27T.png" alt="image-20240313203649092"></p>
<p>对数组去重:</p>
<p>还是那句话,先把视频看完先,能理解多少理解多少,别不想看就行.</p>
<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题:"></a>01背包问题:</h2><p><a href="https://www.starrycoding.com/problem/74">采药 - StarryCoding | 踏出编程第一步</a></p>
<p>动态规划问题:先定义dp数组的含义.</p>
<p><img src="https://s2.loli.net/2024/05/22/3PjzRNQA7XB8lx4.png" alt="image-20240312220217727"></p>
<p><img src="https://s2.loli.net/2024/05/22/dQag2XPvyqcFkWE.png" alt="image-20240312220549035"></p>
<p>这里的转移的意思是:<strong>dp(i)(j)这个变量能被其他的子问题给表示,比如上面的式子.</strong></p>
<p>就是能够被表示的问题,dp[i-1],[j]表示没有选第i个草药. </p>
<p>后面的就是代表选了,v[i]表示消耗的时间,W[j]表示增加的价值.</p>
<p><img src="https://s2.loli.net/2024/05/22/YgUxGuQrsy2HLAh.png" alt="image-20240312223746444"></p>
<p>就是类似于这样的计算.</p>
]]></content>
  </entry>
</search>
